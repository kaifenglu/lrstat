// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lrsim
List lrsim(const int kMax, const NumericVector& informationTime, const NumericVector& criticalValues, const NumericVector& futilityBounds, const double hazardRatioH0, const int allocation1, const int allocation2, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const IntegerVector& plannedEvents, const NumericVector& plannedTime, const int maxNumberOfIterations, const int maxNumberOfRawDatasetsPerStage, int seed);
RcppExport SEXP _lrstat_lrsim(SEXP kMaxSEXP, SEXP informationTimeSEXP, SEXP criticalValuesSEXP, SEXP futilityBoundsSEXP, SEXP hazardRatioH0SEXP, SEXP allocation1SEXP, SEXP allocation2SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP plannedEventsSEXP, SEXP plannedTimeSEXP, SEXP maxNumberOfIterationsSEXP, SEXP maxNumberOfRawDatasetsPerStageSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationTime(informationTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation1(allocation1SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation2(allocation2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type plannedEvents(plannedEventsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type plannedTime(plannedTimeSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfIterations(maxNumberOfIterationsSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfRawDatasetsPerStage(maxNumberOfRawDatasetsPerStageSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(lrsim(kMax, informationTime, criticalValues, futilityBounds, hazardRatioH0, allocation1, allocation2, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, plannedEvents, plannedTime, maxNumberOfIterations, maxNumberOfRawDatasetsPerStage, seed));
    return rcpp_result_gen;
END_RCPP
}
// accrual
NumericVector accrual(const NumericVector& time, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const double accrualDuration);
RcppExport SEXP _lrstat_accrual(SEXP timeSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP accrualDurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    rcpp_result_gen = Rcpp::wrap(accrual(time, accrualTime, accrualIntensity, accrualDuration));
    return rcpp_result_gen;
END_RCPP
}
// patrisk
NumericVector patrisk(const NumericVector& time, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const NumericVector& gamma);
RcppExport SEXP _lrstat_patrisk(SEXP timeSEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(patrisk(time, piecewiseSurvivalTime, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// pevent
NumericVector pevent(const NumericVector& time, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const NumericVector& gamma);
RcppExport SEXP _lrstat_pevent(SEXP timeSEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(pevent(time, piecewiseSurvivalTime, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// hd
double hd(const int j, const double t1, const double t2, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const NumericVector& gamma);
RcppExport SEXP _lrstat_hd(SEXP jSEXP, SEXP t1SEXP, SEXP t2SEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type j(jSEXP);
    Rcpp::traits::input_parameter< const double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(hd(j, t1, t2, piecewiseSurvivalTime, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// pd
double pd(const double t1, const double t2, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const NumericVector& gamma);
RcppExport SEXP _lrstat_pd(SEXP t1SEXP, SEXP t2SEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(pd(t1, t2, piecewiseSurvivalTime, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// ad
NumericVector ad(const NumericVector& time, const double u1, const double u2, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const NumericVector& gamma);
RcppExport SEXP _lrstat_ad(SEXP timeSEXP, SEXP u1SEXP, SEXP u2SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< const double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(ad(time, u1, u2, accrualTime, accrualIntensity, piecewiseSurvivalTime, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// natrisk
NumericMatrix natrisk(const NumericVector& time, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double minFollowupTime, const double maxFollowupTime);
RcppExport SEXP _lrstat_natrisk(SEXP timeSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP minFollowupTimeSEXP, SEXP maxFollowupTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type minFollowupTime(minFollowupTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type maxFollowupTime(maxFollowupTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(natrisk(time, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, lambda1, lambda2, gamma1, gamma2, accrualDuration, minFollowupTime, maxFollowupTime));
    return rcpp_result_gen;
END_RCPP
}
// nevent
NumericMatrix nevent(const NumericVector& time, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double minFollowupTime, const double maxFollowupTime);
RcppExport SEXP _lrstat_nevent(SEXP timeSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP minFollowupTimeSEXP, SEXP maxFollowupTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type minFollowupTime(minFollowupTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type maxFollowupTime(maxFollowupTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(nevent(time, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, lambda1, lambda2, gamma1, gamma2, accrualDuration, minFollowupTime, maxFollowupTime));
    return rcpp_result_gen;
END_RCPP
}
// nevent2
NumericMatrix nevent2(const NumericVector& time, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double minFollowupTime, const double maxFollowupTime);
RcppExport SEXP _lrstat_nevent2(SEXP timeSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP minFollowupTimeSEXP, SEXP maxFollowupTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type minFollowupTime(minFollowupTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type maxFollowupTime(maxFollowupTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(nevent2(time, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, lambda1, lambda2, gamma1, gamma2, accrualDuration, minFollowupTime, maxFollowupTime));
    return rcpp_result_gen;
END_RCPP
}
// lrstat1
DataFrame lrstat1(const double time, const double hazardRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const int numSubintervals, const int predictEventOnly);
RcppExport SEXP _lrstat_lrstat1(SEXP timeSEXP, SEXP hazardRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP numSubintervalsSEXP, SEXP predictEventOnlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const int >::type numSubintervals(numSubintervalsSEXP);
    Rcpp::traits::input_parameter< const int >::type predictEventOnly(predictEventOnlySEXP);
    rcpp_result_gen = Rcpp::wrap(lrstat1(time, hazardRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, numSubintervals, predictEventOnly));
    return rcpp_result_gen;
END_RCPP
}
// lrstat
DataFrame lrstat(const NumericVector& time, const double hazardRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const int numSubintervals, const int predictEventOnly);
RcppExport SEXP _lrstat_lrstat(SEXP timeSEXP, SEXP hazardRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP numSubintervalsSEXP, SEXP predictEventOnlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const int >::type numSubintervals(numSubintervalsSEXP);
    Rcpp::traits::input_parameter< const int >::type predictEventOnly(predictEventOnlySEXP);
    rcpp_result_gen = Rcpp::wrap(lrstat(time, hazardRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, numSubintervals, predictEventOnly));
    return rcpp_result_gen;
END_RCPP
}
// caltime
NumericVector caltime(const NumericVector& nevents, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const int numSubintervals);
RcppExport SEXP _lrstat_caltime(SEXP neventsSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP numSubintervalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type nevents(neventsSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const int >::type numSubintervals(numSubintervalsSEXP);
    rcpp_result_gen = Rcpp::wrap(caltime(nevents, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, numSubintervals));
    return rcpp_result_gen;
END_RCPP
}
// errorSpent
double errorSpent(const double t, const double error, const String sf, const double sfpar);
RcppExport SEXP _lrstat_errorSpent(SEXP tSEXP, SEXP errorSEXP, SEXP sfSEXP, SEXP sfparSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type error(errorSEXP);
    Rcpp::traits::input_parameter< const String >::type sf(sfSEXP);
    Rcpp::traits::input_parameter< const double >::type sfpar(sfparSEXP);
    rcpp_result_gen = Rcpp::wrap(errorSpent(t, error, sf, sfpar));
    return rcpp_result_gen;
END_RCPP
}
// getCriticalValues
NumericVector getCriticalValues(const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const double alpha, const String typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const double hazardRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const int numSubintervals);
RcppExport SEXP _lrstat_getCriticalValues(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP hazardRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP numSubintervalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const String >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const int >::type numSubintervals(numSubintervalsSEXP);
    rcpp_result_gen = Rcpp::wrap(getCriticalValues(kMax, informationRates, efficacyStopping, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, hazardRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, numSubintervals));
    return rcpp_result_gen;
END_RCPP
}
// getCumAlphaSpent
NumericVector getCumAlphaSpent(const int kMax, const NumericVector& informationRates, const NumericVector& criticalValues, const double hazardRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const int numSubintervals);
RcppExport SEXP _lrstat_getCumAlphaSpent(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP criticalValuesSEXP, SEXP hazardRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP numSubintervalsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const int >::type numSubintervals(numSubintervalsSEXP);
    rcpp_result_gen = Rcpp::wrap(getCumAlphaSpent(kMax, informationRates, criticalValues, hazardRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, numSubintervals));
    return rcpp_result_gen;
END_RCPP
}
// lrpower
List lrpower(const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const String typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const String typeBetaSpending, const double parameterBetaSpending, const double hazardRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const int numSubintervals, const bool estimateHazardRatio);
RcppExport SEXP _lrstat_lrpower(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP hazardRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP numSubintervalsSEXP, SEXP estimateHazardRatioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const String >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const String >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const int >::type numSubintervals(numSubintervalsSEXP);
    Rcpp::traits::input_parameter< const bool >::type estimateHazardRatio(estimateHazardRatioSEXP);
    rcpp_result_gen = Rcpp::wrap(lrpower(kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, hazardRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, numSubintervals, estimateHazardRatio));
    return rcpp_result_gen;
END_RCPP
}
// lrsamplesize
List lrsamplesize(const double beta, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const String typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const String typeBetaSpending, const double parameterBetaSpending, const NumericVector& userBetaSpending, const double hazardRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, double accrualDuration, double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const int numSubintervals, const bool estimateHazardRatio, const NumericVector& interval);
RcppExport SEXP _lrstat_lrsamplesize(SEXP betaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP userBetaSpendingSEXP, SEXP hazardRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP numSubintervalsSEXP, SEXP estimateHazardRatioSEXP, SEXP intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const String >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const String >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userBetaSpending(userBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const int >::type numSubintervals(numSubintervalsSEXP);
    Rcpp::traits::input_parameter< const bool >::type estimateHazardRatio(estimateHazardRatioSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval(intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(lrsamplesize(beta, kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, userBetaSpending, hazardRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, numSubintervals, estimateHazardRatio, interval));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(int seed);
RcppExport SEXP _lrstat_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// stl_sort
NumericVector stl_sort(NumericVector x);
RcppExport SEXP _lrstat_stl_sort(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_sort(x));
    return rcpp_result_gen;
END_RCPP
}
// findInterval2
IntegerVector findInterval2(NumericVector x, NumericVector v);
RcppExport SEXP _lrstat_findInterval2(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(findInterval2(x, v));
    return rcpp_result_gen;
END_RCPP
}
// exitprob
List exitprob(const NumericVector& b, NumericVector a, NumericVector theta, const NumericVector& I);
RcppExport SEXP _lrstat_exitprob(SEXP bSEXP, SEXP aSEXP, SEXP thetaSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(exitprob(b, a, theta, I));
    return rcpp_result_gen;
END_RCPP
}
// qtpwexp
double qtpwexp(const double probability, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const double lowerBound);
RcppExport SEXP _lrstat_qtpwexp(SEXP probabilitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP lowerBoundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type probability(probabilitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lowerBound(lowerBoundSEXP);
    rcpp_result_gen = Rcpp::wrap(qtpwexp(probability, piecewiseSurvivalTime, lambda, lowerBound));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lrstat_lrsim", (DL_FUNC) &_lrstat_lrsim, 25},
    {"_lrstat_accrual", (DL_FUNC) &_lrstat_accrual, 4},
    {"_lrstat_patrisk", (DL_FUNC) &_lrstat_patrisk, 4},
    {"_lrstat_pevent", (DL_FUNC) &_lrstat_pevent, 4},
    {"_lrstat_hd", (DL_FUNC) &_lrstat_hd, 6},
    {"_lrstat_pd", (DL_FUNC) &_lrstat_pd, 5},
    {"_lrstat_ad", (DL_FUNC) &_lrstat_ad, 8},
    {"_lrstat_natrisk", (DL_FUNC) &_lrstat_natrisk, 12},
    {"_lrstat_nevent", (DL_FUNC) &_lrstat_nevent, 12},
    {"_lrstat_nevent2", (DL_FUNC) &_lrstat_nevent2, 12},
    {"_lrstat_lrstat1", (DL_FUNC) &_lrstat_lrstat1, 18},
    {"_lrstat_lrstat", (DL_FUNC) &_lrstat_lrstat, 18},
    {"_lrstat_caltime", (DL_FUNC) &_lrstat_caltime, 14},
    {"_lrstat_errorSpent", (DL_FUNC) &_lrstat_errorSpent, 4},
    {"_lrstat_getCriticalValues", (DL_FUNC) &_lrstat_getCriticalValues, 22},
    {"_lrstat_getCumAlphaSpent", (DL_FUNC) &_lrstat_getCumAlphaSpent, 18},
    {"_lrstat_lrpower", (DL_FUNC) &_lrstat_lrpower, 29},
    {"_lrstat_lrsamplesize", (DL_FUNC) &_lrstat_lrsamplesize, 32},
    {"_lrstat_set_seed", (DL_FUNC) &_lrstat_set_seed, 1},
    {"_lrstat_stl_sort", (DL_FUNC) &_lrstat_stl_sort, 1},
    {"_lrstat_findInterval2", (DL_FUNC) &_lrstat_findInterval2, 2},
    {"_lrstat_exitprob", (DL_FUNC) &_lrstat_exitprob, 4},
    {"_lrstat_qtpwexp", (DL_FUNC) &_lrstat_qtpwexp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_lrstat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
