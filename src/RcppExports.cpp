// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// simonBayesAnalysis
List simonBayesAnalysis(const int nstrata, const IntegerVector& r, const IntegerVector& n, const double lambda, const double gamma, const double phi, const double plo);
RcppExport SEXP _lrstat_simonBayesAnalysis(SEXP nstrataSEXP, SEXP rSEXP, SEXP nSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP phiSEXP, SEXP ploSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nstrata(nstrataSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type plo(ploSEXP);
    rcpp_result_gen = Rcpp::wrap(simonBayesAnalysis(nstrata, r, n, lambda, gamma, phi, plo));
    return rcpp_result_gen;
END_RCPP
}
// simonBayesSim
List simonBayesSim(const NumericVector& p, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& stratumFraction, const double lambda, const double gamma, const double phi, const double plo, const double T, const int maxSubjects, const IntegerVector& plannedSubjects, const int maxNumberOfIterations, const int maxNumberOfRawDatasets, const int seed);
RcppExport SEXP _lrstat_simonBayesSim(SEXP pSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP stratumFractionSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP phiSEXP, SEXP ploSEXP, SEXP TSEXP, SEXP maxSubjectsSEXP, SEXP plannedSubjectsSEXP, SEXP maxNumberOfIterationsSEXP, SEXP maxNumberOfRawDatasetsSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const double >::type plo(ploSEXP);
    Rcpp::traits::input_parameter< const double >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int >::type maxSubjects(maxSubjectsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type plannedSubjects(plannedSubjectsSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfIterations(maxNumberOfIterationsSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfRawDatasets(maxNumberOfRawDatasetsSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(simonBayesSim(p, accrualTime, accrualIntensity, stratumFraction, lambda, gamma, phi, plo, T, maxSubjects, plannedSubjects, maxNumberOfIterations, maxNumberOfRawDatasets, seed));
    return rcpp_result_gen;
END_RCPP
}
// binary_tte_sim
List binary_tte_sim(const int kMax1, const int kMax2, const double riskDiffH0, const double hazardRatioH0, const int allocation1, const int allocation2, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const double globalOddsRatio, const NumericVector& pi1, const NumericVector& pi2, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const NumericVector& delta1, const NumericVector& delta2, const double upper1, const double upper2, const double accrualDuration, const NumericVector& plannedTime, const IntegerVector& plannedEvents, const int maxNumberOfIterations, const int maxNumberOfRawDatasetsPerStage, const int seed);
RcppExport SEXP _lrstat_binary_tte_sim(SEXP kMax1SEXP, SEXP kMax2SEXP, SEXP riskDiffH0SEXP, SEXP hazardRatioH0SEXP, SEXP allocation1SEXP, SEXP allocation2SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP globalOddsRatioSEXP, SEXP pi1SEXP, SEXP pi2SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP delta1SEXP, SEXP delta2SEXP, SEXP upper1SEXP, SEXP upper2SEXP, SEXP accrualDurationSEXP, SEXP plannedTimeSEXP, SEXP plannedEventsSEXP, SEXP maxNumberOfIterationsSEXP, SEXP maxNumberOfRawDatasetsPerStageSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax1(kMax1SEXP);
    Rcpp::traits::input_parameter< const int >::type kMax2(kMax2SEXP);
    Rcpp::traits::input_parameter< const double >::type riskDiffH0(riskDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation1(allocation1SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation2(allocation2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const double >::type globalOddsRatio(globalOddsRatioSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< const double >::type upper1(upper1SEXP);
    Rcpp::traits::input_parameter< const double >::type upper2(upper2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type plannedTime(plannedTimeSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type plannedEvents(plannedEventsSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfIterations(maxNumberOfIterationsSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfRawDatasetsPerStage(maxNumberOfRawDatasetsPerStageSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(binary_tte_sim(kMax1, kMax2, riskDiffH0, hazardRatioH0, allocation1, allocation2, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, globalOddsRatio, pi1, pi2, lambda1, lambda2, gamma1, gamma2, delta1, delta2, upper1, upper2, accrualDuration, plannedTime, plannedEvents, maxNumberOfIterations, maxNumberOfRawDatasetsPerStage, seed));
    return rcpp_result_gen;
END_RCPP
}
// kmstat1
DataFrame kmstat1(const double time, const double milestone, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup);
RcppExport SEXP _lrstat_kmstat1(SEXP timeSEXP, SEXP milestoneSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    rcpp_result_gen = Rcpp::wrap(kmstat1(time, milestone, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup));
    return rcpp_result_gen;
END_RCPP
}
// kmstat
DataFrame kmstat(const NumericVector& time, const double milestone, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup);
RcppExport SEXP _lrstat_kmstat(SEXP timeSEXP, SEXP milestoneSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    rcpp_result_gen = Rcpp::wrap(kmstat(time, milestone, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup));
    return rcpp_result_gen;
END_RCPP
}
// kmpower
List kmpower(const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const double milestone, const double survDiffH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const NumericVector& spendingTime, const double studyDuration);
RcppExport SEXP _lrstat_kmpower(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP milestoneSEXP, SEXP survDiffH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP spendingTimeSEXP, SEXP studyDurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type survDiffH0(survDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type studyDuration(studyDurationSEXP);
    rcpp_result_gen = Rcpp::wrap(kmpower(kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, milestone, survDiffH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, spendingTime, studyDuration));
    return rcpp_result_gen;
END_RCPP
}
// kmsamplesize
List kmsamplesize(const double beta, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const NumericVector& userBetaSpending, const double milestone, const double survDiffH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, double accrualDuration, double followupTime, const bool fixedFollowup, const NumericVector& interval, const NumericVector& spendingTime, const bool rounding);
RcppExport SEXP _lrstat_kmsamplesize(SEXP betaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP userBetaSpendingSEXP, SEXP milestoneSEXP, SEXP survDiffH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP intervalSEXP, SEXP spendingTimeSEXP, SEXP roundingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userBetaSpending(userBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type survDiffH0(survDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type rounding(roundingSEXP);
    rcpp_result_gen = Rcpp::wrap(kmsamplesize(beta, kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, userBetaSpending, milestone, survDiffH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, interval, spendingTime, rounding));
    return rcpp_result_gen;
END_RCPP
}
// kmpower1s
List kmpower1s(const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const double milestone, const double survH0, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda, const NumericVector& gamma, const double accrualDuration, const double followupTime, const bool fixedFollowup, const NumericVector& spendingTime, const double studyDuration);
RcppExport SEXP _lrstat_kmpower1s(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP milestoneSEXP, SEXP survH0SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP spendingTimeSEXP, SEXP studyDurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type survH0(survH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type studyDuration(studyDurationSEXP);
    rcpp_result_gen = Rcpp::wrap(kmpower1s(kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, milestone, survH0, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda, gamma, accrualDuration, followupTime, fixedFollowup, spendingTime, studyDuration));
    return rcpp_result_gen;
END_RCPP
}
// kmsamplesize1s
List kmsamplesize1s(const double beta, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const NumericVector& userBetaSpending, const double milestone, const double survH0, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda, const NumericVector& gamma, double accrualDuration, double followupTime, const bool fixedFollowup, const NumericVector& interval, const NumericVector& spendingTime, const bool rounding);
RcppExport SEXP _lrstat_kmsamplesize1s(SEXP betaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP userBetaSpendingSEXP, SEXP milestoneSEXP, SEXP survH0SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP intervalSEXP, SEXP spendingTimeSEXP, SEXP roundingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userBetaSpending(userBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type survH0(survH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type rounding(roundingSEXP);
    rcpp_result_gen = Rcpp::wrap(kmsamplesize1s(beta, kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, userBetaSpending, milestone, survH0, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda, gamma, accrualDuration, followupTime, fixedFollowup, interval, spendingTime, rounding));
    return rcpp_result_gen;
END_RCPP
}
// kmpowerequiv
List kmpowerequiv(const int kMax, const NumericVector& informationRates, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const double milestone, const double survDiffLower, const double survDiffUpper, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const NumericVector& spendingTime, const double studyDuration);
RcppExport SEXP _lrstat_kmpowerequiv(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP milestoneSEXP, SEXP survDiffLowerSEXP, SEXP survDiffUpperSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP spendingTimeSEXP, SEXP studyDurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type survDiffLower(survDiffLowerSEXP);
    Rcpp::traits::input_parameter< const double >::type survDiffUpper(survDiffUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type studyDuration(studyDurationSEXP);
    rcpp_result_gen = Rcpp::wrap(kmpowerequiv(kMax, informationRates, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, milestone, survDiffLower, survDiffUpper, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, spendingTime, studyDuration));
    return rcpp_result_gen;
END_RCPP
}
// kmsamplesizeequiv
List kmsamplesizeequiv(const double beta, const int kMax, const NumericVector& informationRates, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const double milestone, const double survDiffLower, const double survDiffUpper, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, double accrualDuration, double followupTime, const bool fixedFollowup, const NumericVector& interval, const NumericVector& spendingTime, const bool rounding);
RcppExport SEXP _lrstat_kmsamplesizeequiv(SEXP betaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP milestoneSEXP, SEXP survDiffLowerSEXP, SEXP survDiffUpperSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP intervalSEXP, SEXP spendingTimeSEXP, SEXP roundingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type survDiffLower(survDiffLowerSEXP);
    Rcpp::traits::input_parameter< const double >::type survDiffUpper(survDiffUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type rounding(roundingSEXP);
    rcpp_result_gen = Rcpp::wrap(kmsamplesizeequiv(beta, kMax, informationRates, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, milestone, survDiffLower, survDiffUpper, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, interval, spendingTime, rounding));
    return rcpp_result_gen;
END_RCPP
}
// kmdiff
DataFrame kmdiff(const DataFrame data, const std::string rep, const std::string stratum, const std::string treat, const std::string time, const std::string event, const double milestone, const double survDiffH0, const double confint);
RcppExport SEXP _lrstat_kmdiff(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP treatSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP milestoneSEXP, SEXP survDiffH0SEXP, SEXP confintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const std::string >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type survDiffH0(survDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type confint(confintSEXP);
    rcpp_result_gen = Rcpp::wrap(kmdiff(data, rep, stratum, treat, time, event, milestone, survDiffH0, confint));
    return rcpp_result_gen;
END_RCPP
}
// lrsim
List lrsim(const int kMax, const NumericVector& informationRates, const NumericVector& criticalValues, const NumericVector& futilityBounds, const double hazardRatioH0, const int allocation1, const int allocation2, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const IntegerVector& plannedEvents, const NumericVector& plannedTime, const int maxNumberOfIterations, const int maxNumberOfRawDatasetsPerStage, const int seed);
RcppExport SEXP _lrstat_lrsim(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP criticalValuesSEXP, SEXP futilityBoundsSEXP, SEXP hazardRatioH0SEXP, SEXP allocation1SEXP, SEXP allocation2SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP plannedEventsSEXP, SEXP plannedTimeSEXP, SEXP maxNumberOfIterationsSEXP, SEXP maxNumberOfRawDatasetsPerStageSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation1(allocation1SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation2(allocation2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type plannedEvents(plannedEventsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type plannedTime(plannedTimeSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfIterations(maxNumberOfIterationsSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfRawDatasetsPerStage(maxNumberOfRawDatasetsPerStageSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(lrsim(kMax, informationRates, criticalValues, futilityBounds, hazardRatioH0, allocation1, allocation2, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, plannedEvents, plannedTime, maxNumberOfIterations, maxNumberOfRawDatasetsPerStage, seed));
    return rcpp_result_gen;
END_RCPP
}
// lrsim3a
List lrsim3a(const int kMax, const double hazardRatioH013, const double hazardRatioH023, const double hazardRatioH012, const int allocation1, const int allocation2, const int allocation3, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& lambda3, const NumericVector& gamma1, const NumericVector& gamma2, const NumericVector& gamma3, const double accrualDuration, const double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const IntegerVector& plannedEvents, const NumericVector& plannedTime, const int maxNumberOfIterations, const int maxNumberOfRawDatasetsPerStage, const int seed);
RcppExport SEXP _lrstat_lrsim3a(SEXP kMaxSEXP, SEXP hazardRatioH013SEXP, SEXP hazardRatioH023SEXP, SEXP hazardRatioH012SEXP, SEXP allocation1SEXP, SEXP allocation2SEXP, SEXP allocation3SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP lambda3SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP gamma3SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP plannedEventsSEXP, SEXP plannedTimeSEXP, SEXP maxNumberOfIterationsSEXP, SEXP maxNumberOfRawDatasetsPerStageSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH013(hazardRatioH013SEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH023(hazardRatioH023SEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH012(hazardRatioH012SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation1(allocation1SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation2(allocation2SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation3(allocation3SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda3(lambda3SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma3(gamma3SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type plannedEvents(plannedEventsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type plannedTime(plannedTimeSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfIterations(maxNumberOfIterationsSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfRawDatasetsPerStage(maxNumberOfRawDatasetsPerStageSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(lrsim3a(kMax, hazardRatioH013, hazardRatioH023, hazardRatioH012, allocation1, allocation2, allocation3, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, lambda3, gamma1, gamma2, gamma3, accrualDuration, followupTime, fixedFollowup, rho1, rho2, plannedEvents, plannedTime, maxNumberOfIterations, maxNumberOfRawDatasetsPerStage, seed));
    return rcpp_result_gen;
END_RCPP
}
// lrsim2e
List lrsim2e(const int kMax, const int kMaxe1, const double hazardRatioH0e1, const double hazardRatioH0e2, const int allocation1, const int allocation2, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const double rho, const NumericVector& lambda1e1, const NumericVector& lambda2e1, const NumericVector& lambda1e2, const NumericVector& lambda2e2, const NumericVector& gamma1e1, const NumericVector& gamma2e1, const NumericVector& gamma1e2, const NumericVector& gamma2e2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const IntegerVector& plannedEvents, const NumericVector& plannedTime, const int maxNumberOfIterations, const int maxNumberOfRawDatasetsPerStage, const int seed);
RcppExport SEXP _lrstat_lrsim2e(SEXP kMaxSEXP, SEXP kMaxe1SEXP, SEXP hazardRatioH0e1SEXP, SEXP hazardRatioH0e2SEXP, SEXP allocation1SEXP, SEXP allocation2SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP rhoSEXP, SEXP lambda1e1SEXP, SEXP lambda2e1SEXP, SEXP lambda1e2SEXP, SEXP lambda2e2SEXP, SEXP gamma1e1SEXP, SEXP gamma2e1SEXP, SEXP gamma1e2SEXP, SEXP gamma2e2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP plannedEventsSEXP, SEXP plannedTimeSEXP, SEXP maxNumberOfIterationsSEXP, SEXP maxNumberOfRawDatasetsPerStageSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const int >::type kMaxe1(kMaxe1SEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0e1(hazardRatioH0e1SEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0e2(hazardRatioH0e2SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation1(allocation1SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation2(allocation2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1e1(lambda1e1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2e1(lambda2e1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1e2(lambda1e2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2e2(lambda2e2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1e1(gamma1e1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2e1(gamma2e1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1e2(gamma1e2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2e2(gamma2e2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type plannedEvents(plannedEventsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type plannedTime(plannedTimeSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfIterations(maxNumberOfIterationsSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfRawDatasetsPerStage(maxNumberOfRawDatasetsPerStageSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(lrsim2e(kMax, kMaxe1, hazardRatioH0e1, hazardRatioH0e2, allocation1, allocation2, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, rho, lambda1e1, lambda2e1, lambda1e2, lambda2e2, gamma1e1, gamma2e1, gamma1e2, gamma2e2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, plannedEvents, plannedTime, maxNumberOfIterations, maxNumberOfRawDatasetsPerStage, seed));
    return rcpp_result_gen;
END_RCPP
}
// lrsim2e3a
List lrsim2e3a(const int kMax, const int kMaxe1, const double hazardRatioH013e1, const double hazardRatioH023e1, const double hazardRatioH012e1, const double hazardRatioH013e2, const double hazardRatioH023e2, const double hazardRatioH012e2, const int allocation1, const int allocation2, const int allocation3, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const double rho, const NumericVector& lambda1e1, const NumericVector& lambda2e1, const NumericVector& lambda3e1, const NumericVector& lambda1e2, const NumericVector& lambda2e2, const NumericVector& lambda3e2, const NumericVector& gamma1e1, const NumericVector& gamma2e1, const NumericVector& gamma3e1, const NumericVector& gamma1e2, const NumericVector& gamma2e2, const NumericVector& gamma3e2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const IntegerVector& plannedEvents, const NumericVector& plannedTime, const int maxNumberOfIterations, const int maxNumberOfRawDatasetsPerStage, const int seed);
RcppExport SEXP _lrstat_lrsim2e3a(SEXP kMaxSEXP, SEXP kMaxe1SEXP, SEXP hazardRatioH013e1SEXP, SEXP hazardRatioH023e1SEXP, SEXP hazardRatioH012e1SEXP, SEXP hazardRatioH013e2SEXP, SEXP hazardRatioH023e2SEXP, SEXP hazardRatioH012e2SEXP, SEXP allocation1SEXP, SEXP allocation2SEXP, SEXP allocation3SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP rhoSEXP, SEXP lambda1e1SEXP, SEXP lambda2e1SEXP, SEXP lambda3e1SEXP, SEXP lambda1e2SEXP, SEXP lambda2e2SEXP, SEXP lambda3e2SEXP, SEXP gamma1e1SEXP, SEXP gamma2e1SEXP, SEXP gamma3e1SEXP, SEXP gamma1e2SEXP, SEXP gamma2e2SEXP, SEXP gamma3e2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP plannedEventsSEXP, SEXP plannedTimeSEXP, SEXP maxNumberOfIterationsSEXP, SEXP maxNumberOfRawDatasetsPerStageSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const int >::type kMaxe1(kMaxe1SEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH013e1(hazardRatioH013e1SEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH023e1(hazardRatioH023e1SEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH012e1(hazardRatioH012e1SEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH013e2(hazardRatioH013e2SEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH023e2(hazardRatioH023e2SEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH012e2(hazardRatioH012e2SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation1(allocation1SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation2(allocation2SEXP);
    Rcpp::traits::input_parameter< const int >::type allocation3(allocation3SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1e1(lambda1e1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2e1(lambda2e1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda3e1(lambda3e1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1e2(lambda1e2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2e2(lambda2e2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda3e2(lambda3e2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1e1(gamma1e1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2e1(gamma2e1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma3e1(gamma3e1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1e2(gamma1e2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2e2(gamma2e2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma3e2(gamma3e2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type plannedEvents(plannedEventsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type plannedTime(plannedTimeSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfIterations(maxNumberOfIterationsSEXP);
    Rcpp::traits::input_parameter< const int >::type maxNumberOfRawDatasetsPerStage(maxNumberOfRawDatasetsPerStageSEXP);
    Rcpp::traits::input_parameter< const int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(lrsim2e3a(kMax, kMaxe1, hazardRatioH013e1, hazardRatioH023e1, hazardRatioH012e1, hazardRatioH013e2, hazardRatioH023e2, hazardRatioH012e2, allocation1, allocation2, allocation3, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, rho, lambda1e1, lambda2e1, lambda3e1, lambda1e2, lambda2e2, lambda3e2, gamma1e1, gamma2e1, gamma3e1, gamma1e2, gamma2e2, gamma3e2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, plannedEvents, plannedTime, maxNumberOfIterations, maxNumberOfRawDatasetsPerStage, seed));
    return rcpp_result_gen;
END_RCPP
}
// lrstat1
DataFrame lrstat1(const double time, const double hazardRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const int numSubintervals, const bool predictEventOnly);
RcppExport SEXP _lrstat_lrstat1(SEXP timeSEXP, SEXP hazardRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP numSubintervalsSEXP, SEXP predictEventOnlySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const int >::type numSubintervals(numSubintervalsSEXP);
    Rcpp::traits::input_parameter< const bool >::type predictEventOnly(predictEventOnlySEXP);
    rcpp_result_gen = Rcpp::wrap(lrstat1(time, hazardRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, numSubintervals, predictEventOnly));
    return rcpp_result_gen;
END_RCPP
}
// lrstat
DataFrame lrstat(const NumericVector& time, const double hazardRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const int numSubintervals, const int predictTarget);
RcppExport SEXP _lrstat_lrstat(SEXP timeSEXP, SEXP hazardRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP numSubintervalsSEXP, SEXP predictTargetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const int >::type numSubintervals(numSubintervalsSEXP);
    Rcpp::traits::input_parameter< const int >::type predictTarget(predictTargetSEXP);
    rcpp_result_gen = Rcpp::wrap(lrstat(time, hazardRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, numSubintervals, predictTarget));
    return rcpp_result_gen;
END_RCPP
}
// caltime
NumericVector caltime(const NumericVector& nevents, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup);
RcppExport SEXP _lrstat_caltime(SEXP neventsSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type nevents(neventsSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    rcpp_result_gen = Rcpp::wrap(caltime(nevents, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup));
    return rcpp_result_gen;
END_RCPP
}
// getDurationFromNevents
DataFrame getDurationFromNevents(const double nevents, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double followupTime, const bool fixedFollowup, const int npoints, const NumericVector& interval);
RcppExport SEXP _lrstat_getDurationFromNevents(SEXP neventsSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP npointsSEXP, SEXP intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type nevents(neventsSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const int >::type npoints(npointsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval(intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(getDurationFromNevents(nevents, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, followupTime, fixedFollowup, npoints, interval));
    return rcpp_result_gen;
END_RCPP
}
// lrpower
List lrpower(const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const double hazardRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const int numSubintervals, const bool estimateHazardRatio, const std::string typeOfComputation, const NumericVector& spendingTime, const double studyDuration);
RcppExport SEXP _lrstat_lrpower(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP hazardRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP numSubintervalsSEXP, SEXP estimateHazardRatioSEXP, SEXP typeOfComputationSEXP, SEXP spendingTimeSEXP, SEXP studyDurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const int >::type numSubintervals(numSubintervalsSEXP);
    Rcpp::traits::input_parameter< const bool >::type estimateHazardRatio(estimateHazardRatioSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeOfComputation(typeOfComputationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type studyDuration(studyDurationSEXP);
    rcpp_result_gen = Rcpp::wrap(lrpower(kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, hazardRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, numSubintervals, estimateHazardRatio, typeOfComputation, spendingTime, studyDuration));
    return rcpp_result_gen;
END_RCPP
}
// getNeventsFromHazardRatio
double getNeventsFromHazardRatio(const double beta, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const NumericVector& userBetaSpending, const NumericVector& spendingTime, const double hazardRatioH0, const double hazardRatio, const double allocationRatioPlanned, const bool rounding);
RcppExport SEXP _lrstat_getNeventsFromHazardRatio(SEXP betaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP userBetaSpendingSEXP, SEXP spendingTimeSEXP, SEXP hazardRatioH0SEXP, SEXP hazardRatioSEXP, SEXP allocationRatioPlannedSEXP, SEXP roundingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userBetaSpending(userBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatio(hazardRatioSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const bool >::type rounding(roundingSEXP);
    rcpp_result_gen = Rcpp::wrap(getNeventsFromHazardRatio(beta, kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, userBetaSpending, spendingTime, hazardRatioH0, hazardRatio, allocationRatioPlanned, rounding));
    return rcpp_result_gen;
END_RCPP
}
// lrsamplesize
List lrsamplesize(const double beta, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const NumericVector& userBetaSpending, const double hazardRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, double accrualDuration, double followupTime, const bool fixedFollowup, const double rho1, const double rho2, const int numSubintervals, const bool estimateHazardRatio, const std::string typeOfComputation, const NumericVector& interval, const NumericVector& spendingTime, const bool rounding);
RcppExport SEXP _lrstat_lrsamplesize(SEXP betaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP userBetaSpendingSEXP, SEXP hazardRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP rho1SEXP, SEXP rho2SEXP, SEXP numSubintervalsSEXP, SEXP estimateHazardRatioSEXP, SEXP typeOfComputationSEXP, SEXP intervalSEXP, SEXP spendingTimeSEXP, SEXP roundingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userBetaSpending(userBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioH0(hazardRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    Rcpp::traits::input_parameter< const int >::type numSubintervals(numSubintervalsSEXP);
    Rcpp::traits::input_parameter< const bool >::type estimateHazardRatio(estimateHazardRatioSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeOfComputation(typeOfComputationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type rounding(roundingSEXP);
    rcpp_result_gen = Rcpp::wrap(lrsamplesize(beta, kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, userBetaSpending, hazardRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, rho1, rho2, numSubintervals, estimateHazardRatio, typeOfComputation, interval, spendingTime, rounding));
    return rcpp_result_gen;
END_RCPP
}
// lrpowerequiv
List lrpowerequiv(const int kMax, const NumericVector& informationRates, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const double hazardRatioLower, const double hazardRatioUpper, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const std::string typeOfComputation, const NumericVector& spendingTime, const double studyDuration);
RcppExport SEXP _lrstat_lrpowerequiv(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP hazardRatioLowerSEXP, SEXP hazardRatioUpperSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP typeOfComputationSEXP, SEXP spendingTimeSEXP, SEXP studyDurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioLower(hazardRatioLowerSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioUpper(hazardRatioUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeOfComputation(typeOfComputationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type studyDuration(studyDurationSEXP);
    rcpp_result_gen = Rcpp::wrap(lrpowerequiv(kMax, informationRates, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, hazardRatioLower, hazardRatioUpper, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, typeOfComputation, spendingTime, studyDuration));
    return rcpp_result_gen;
END_RCPP
}
// lrsamplesizeequiv
List lrsamplesizeequiv(const double beta, const int kMax, const NumericVector& informationRates, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const double hazardRatioLower, const double hazardRatioUpper, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, double accrualDuration, double followupTime, const bool fixedFollowup, const std::string typeOfComputation, const NumericVector& interval, const NumericVector& spendingTime, const bool rounding);
RcppExport SEXP _lrstat_lrsamplesizeequiv(SEXP betaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP hazardRatioLowerSEXP, SEXP hazardRatioUpperSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP typeOfComputationSEXP, SEXP intervalSEXP, SEXP spendingTimeSEXP, SEXP roundingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioLower(hazardRatioLowerSEXP);
    Rcpp::traits::input_parameter< const double >::type hazardRatioUpper(hazardRatioUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeOfComputation(typeOfComputationSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type rounding(roundingSEXP);
    rcpp_result_gen = Rcpp::wrap(lrsamplesizeequiv(beta, kMax, informationRates, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, hazardRatioLower, hazardRatioUpper, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, typeOfComputation, interval, spendingTime, rounding));
    return rcpp_result_gen;
END_RCPP
}
// updateGraph
List updateGraph(const NumericVector& w, const NumericMatrix& G, const IntegerVector& I, const int j);
RcppExport SEXP _lrstat_updateGraph(SEXP wSEXP, SEXP GSEXP, SEXP ISEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(updateGraph(w, G, I, j));
    return rcpp_result_gen;
END_RCPP
}
// fadjpboncpp
NumericMatrix fadjpboncpp(const NumericVector& w, const NumericMatrix& G, const NumericMatrix& p);
RcppExport SEXP _lrstat_fadjpboncpp(SEXP wSEXP, SEXP GSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(fadjpboncpp(w, G, p));
    return rcpp_result_gen;
END_RCPP
}
// fwgtmat
NumericMatrix fwgtmat(const NumericVector& w, const NumericMatrix& G);
RcppExport SEXP _lrstat_fwgtmat(SEXP wSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(fwgtmat(w, G));
    return rcpp_result_gen;
END_RCPP
}
// fadjpsimcpp
NumericMatrix fadjpsimcpp(const NumericMatrix& wgtmat, const NumericMatrix& p, const LogicalMatrix& family);
RcppExport SEXP _lrstat_fadjpsimcpp(SEXP wgtmatSEXP, SEXP pSEXP, SEXP familySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type wgtmat(wgtmatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type family(familySEXP);
    rcpp_result_gen = Rcpp::wrap(fadjpsimcpp(wgtmat, p, family));
    return rcpp_result_gen;
END_RCPP
}
// repeatedPValuecpp
NumericVector repeatedPValuecpp(const int kMax, const std::string typeAlphaSpending, const double parameterAlphaSpending, const double maxInformation, const NumericMatrix& p, const NumericMatrix& information, const NumericMatrix& spendingTime);
RcppExport SEXP _lrstat_repeatedPValuecpp(SEXP kMaxSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP maxInformationSEXP, SEXP pSEXP, SEXP informationSEXP, SEXP spendingTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type maxInformation(maxInformationSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type information(informationSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type spendingTime(spendingTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(repeatedPValuecpp(kMax, typeAlphaSpending, parameterAlphaSpending, maxInformation, p, information, spendingTime));
    return rcpp_result_gen;
END_RCPP
}
// fseqboncpp
IntegerVector fseqboncpp(const NumericVector& w, const NumericMatrix& G, const double alpha, const int kMax, const StringVector& typeAlphaSpending, const NumericVector& parameterAlphaSpending, const LogicalMatrix& incidenceMatrix, const NumericVector& maxInformation, const NumericMatrix& p, const NumericMatrix& information, const NumericMatrix& spendingTime);
RcppExport SEXP _lrstat_fseqboncpp(SEXP wSEXP, SEXP GSEXP, SEXP alphaSEXP, SEXP kMaxSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP incidenceMatrixSEXP, SEXP maxInformationSEXP, SEXP pSEXP, SEXP informationSEXP, SEXP spendingTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type G(GSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type incidenceMatrix(incidenceMatrixSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type maxInformation(maxInformationSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type information(informationSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type spendingTime(spendingTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(fseqboncpp(w, G, alpha, kMax, typeAlphaSpending, parameterAlphaSpending, incidenceMatrix, maxInformation, p, information, spendingTime));
    return rcpp_result_gen;
END_RCPP
}
// fstp2seqcpp
NumericMatrix fstp2seqcpp(const NumericMatrix& p, const NumericVector& gamma, const std::string test, const bool retest);
RcppExport SEXP _lrstat_fstp2seqcpp(SEXP pSEXP, SEXP gammaSEXP, SEXP testSEXP, SEXP retestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type test(testSEXP);
    Rcpp::traits::input_parameter< const bool >::type retest(retestSEXP);
    rcpp_result_gen = Rcpp::wrap(fstp2seqcpp(p, gamma, test, retest));
    return rcpp_result_gen;
END_RCPP
}
// fstdmixcpp
NumericMatrix fstdmixcpp(const NumericMatrix& p, const LogicalMatrix& family, const LogicalMatrix& serial, const LogicalMatrix& parallel, const NumericVector& gamma, const std::string test, const bool exhaust);
RcppExport SEXP _lrstat_fstdmixcpp(SEXP pSEXP, SEXP familySEXP, SEXP serialSEXP, SEXP parallelSEXP, SEXP gammaSEXP, SEXP testSEXP, SEXP exhaustSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type serial(serialSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type test(testSEXP);
    Rcpp::traits::input_parameter< const bool >::type exhaust(exhaustSEXP);
    rcpp_result_gen = Rcpp::wrap(fstdmixcpp(p, family, serial, parallel, gamma, test, exhaust));
    return rcpp_result_gen;
END_RCPP
}
// fmodmixcpp
NumericMatrix fmodmixcpp(const NumericMatrix& p, const LogicalMatrix& family, const LogicalMatrix& serial, const LogicalMatrix& parallel, const NumericVector& gamma, const std::string test, const bool exhaust);
RcppExport SEXP _lrstat_fmodmixcpp(SEXP pSEXP, SEXP familySEXP, SEXP serialSEXP, SEXP parallelSEXP, SEXP gammaSEXP, SEXP testSEXP, SEXP exhaustSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type family(familySEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type serial(serialSEXP);
    Rcpp::traits::input_parameter< const LogicalMatrix& >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type test(testSEXP);
    Rcpp::traits::input_parameter< const bool >::type exhaust(exhaustSEXP);
    rcpp_result_gen = Rcpp::wrap(fmodmixcpp(p, family, serial, parallel, gamma, test, exhaust));
    return rcpp_result_gen;
END_RCPP
}
// getCI
DataFrame getCI(const int L, const double zL, const double IMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& spendingTime);
RcppExport SEXP _lrstat_getCI(SEXP LSEXP, SEXP zLSEXP, SEXP IMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP spendingTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type L(LSEXP);
    Rcpp::traits::input_parameter< const double >::type zL(zLSEXP);
    Rcpp::traits::input_parameter< const double >::type IMax(IMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(getCI(L, zL, IMax, informationRates, efficacyStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, spendingTime));
    return rcpp_result_gen;
END_RCPP
}
// getRCI
DataFrame getRCI(const int L, const double zL, const double IMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& spendingTime);
RcppExport SEXP _lrstat_getRCI(SEXP LSEXP, SEXP zLSEXP, SEXP IMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP spendingTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type L(LSEXP);
    Rcpp::traits::input_parameter< const double >::type zL(zLSEXP);
    Rcpp::traits::input_parameter< const double >::type IMax(IMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(getRCI(L, zL, IMax, informationRates, efficacyStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, spendingTime));
    return rcpp_result_gen;
END_RCPP
}
// getADCI
DataFrame getADCI(const int L, const double zL, const double IMax, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& spendingTime, const int L2, const double zL2, const double INew, const bool MullerSchafer, const NumericVector& informationRatesNew, const LogicalVector& efficacyStoppingNew, const std::string typeAlphaSpendingNew, const double parameterAlphaSpendingNew, const NumericVector& spendingTimeNew);
RcppExport SEXP _lrstat_getADCI(SEXP LSEXP, SEXP zLSEXP, SEXP IMaxSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP spendingTimeSEXP, SEXP L2SEXP, SEXP zL2SEXP, SEXP INewSEXP, SEXP MullerSchaferSEXP, SEXP informationRatesNewSEXP, SEXP efficacyStoppingNewSEXP, SEXP typeAlphaSpendingNewSEXP, SEXP parameterAlphaSpendingNewSEXP, SEXP spendingTimeNewSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type L(LSEXP);
    Rcpp::traits::input_parameter< const double >::type zL(zLSEXP);
    Rcpp::traits::input_parameter< const double >::type IMax(IMaxSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const int >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< const double >::type zL2(zL2SEXP);
    Rcpp::traits::input_parameter< const double >::type INew(INewSEXP);
    Rcpp::traits::input_parameter< const bool >::type MullerSchafer(MullerSchaferSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRatesNew(informationRatesNewSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStoppingNew(efficacyStoppingNewSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpendingNew(typeAlphaSpendingNewSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpendingNew(parameterAlphaSpendingNewSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTimeNew(spendingTimeNewSEXP);
    rcpp_result_gen = Rcpp::wrap(getADCI(L, zL, IMax, kMax, informationRates, efficacyStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, spendingTime, L2, zL2, INew, MullerSchafer, informationRatesNew, efficacyStoppingNew, typeAlphaSpendingNew, parameterAlphaSpendingNew, spendingTimeNew));
    return rcpp_result_gen;
END_RCPP
}
// getADRCI
DataFrame getADRCI(const int L, const double zL, const double IMax, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& spendingTime, const int L2, const double zL2, const double INew, const bool MullerSchafer, const NumericVector& informationRatesNew, const LogicalVector& efficacyStoppingNew, const std::string typeAlphaSpendingNew, const double parameterAlphaSpendingNew, const NumericVector& spendingTimeNew);
RcppExport SEXP _lrstat_getADRCI(SEXP LSEXP, SEXP zLSEXP, SEXP IMaxSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP spendingTimeSEXP, SEXP L2SEXP, SEXP zL2SEXP, SEXP INewSEXP, SEXP MullerSchaferSEXP, SEXP informationRatesNewSEXP, SEXP efficacyStoppingNewSEXP, SEXP typeAlphaSpendingNewSEXP, SEXP parameterAlphaSpendingNewSEXP, SEXP spendingTimeNewSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type L(LSEXP);
    Rcpp::traits::input_parameter< const double >::type zL(zLSEXP);
    Rcpp::traits::input_parameter< const double >::type IMax(IMaxSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const int >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< const double >::type zL2(zL2SEXP);
    Rcpp::traits::input_parameter< const double >::type INew(INewSEXP);
    Rcpp::traits::input_parameter< const bool >::type MullerSchafer(MullerSchaferSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRatesNew(informationRatesNewSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStoppingNew(efficacyStoppingNewSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpendingNew(typeAlphaSpendingNewSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpendingNew(parameterAlphaSpendingNewSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTimeNew(spendingTimeNewSEXP);
    rcpp_result_gen = Rcpp::wrap(getADRCI(L, zL, IMax, kMax, informationRates, efficacyStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, spendingTime, L2, zL2, INew, MullerSchafer, informationRatesNew, efficacyStoppingNew, typeAlphaSpendingNew, parameterAlphaSpendingNew, spendingTimeNew));
    return rcpp_result_gen;
END_RCPP
}
// getCP
double getCP(double INew, const int L, const double zL, const NumericVector& theta, const double IMax, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const NumericVector& spendingTime, const bool MullerSchafer, const int kNew, const NumericVector& informationRatesNew, const LogicalVector& efficacyStoppingNew, const LogicalVector& futilityStoppingNew, const std::string typeAlphaSpendingNew, const double parameterAlphaSpendingNew, const std::string typeBetaSpendingNew, const double parameterBetaSpendingNew, const NumericVector& spendingTimeNew, const double varianceRatio);
RcppExport SEXP _lrstat_getCP(SEXP INewSEXP, SEXP LSEXP, SEXP zLSEXP, SEXP thetaSEXP, SEXP IMaxSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP spendingTimeSEXP, SEXP MullerSchaferSEXP, SEXP kNewSEXP, SEXP informationRatesNewSEXP, SEXP efficacyStoppingNewSEXP, SEXP futilityStoppingNewSEXP, SEXP typeAlphaSpendingNewSEXP, SEXP parameterAlphaSpendingNewSEXP, SEXP typeBetaSpendingNewSEXP, SEXP parameterBetaSpendingNewSEXP, SEXP spendingTimeNewSEXP, SEXP varianceRatioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type INew(INewSEXP);
    Rcpp::traits::input_parameter< const int >::type L(LSEXP);
    Rcpp::traits::input_parameter< const double >::type zL(zLSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type IMax(IMaxSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type MullerSchafer(MullerSchaferSEXP);
    Rcpp::traits::input_parameter< const int >::type kNew(kNewSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRatesNew(informationRatesNewSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStoppingNew(efficacyStoppingNewSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStoppingNew(futilityStoppingNewSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpendingNew(typeAlphaSpendingNewSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpendingNew(parameterAlphaSpendingNewSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpendingNew(typeBetaSpendingNewSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpendingNew(parameterBetaSpendingNewSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTimeNew(spendingTimeNewSEXP);
    Rcpp::traits::input_parameter< const double >::type varianceRatio(varianceRatioSEXP);
    rcpp_result_gen = Rcpp::wrap(getCP(INew, L, zL, theta, IMax, kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, spendingTime, MullerSchafer, kNew, informationRatesNew, efficacyStoppingNew, futilityStoppingNew, typeAlphaSpendingNew, parameterAlphaSpendingNew, typeBetaSpendingNew, parameterBetaSpendingNew, spendingTimeNew, varianceRatio));
    return rcpp_result_gen;
END_RCPP
}
// ftrunccpp
NumericMatrix ftrunccpp(const NumericMatrix& p, const std::string test, const double gamma);
RcppExport SEXP _lrstat_ftrunccpp(SEXP pSEXP, SEXP testSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::string >::type test(testSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(ftrunccpp(p, test, gamma));
    return rcpp_result_gen;
END_RCPP
}
// simon2stage
DataFrame simon2stage(const double alpha, const double beta, const double piH0, const double pi, const int n_max);
RcppExport SEXP _lrstat_simon2stage(SEXP alphaSEXP, SEXP betaSEXP, SEXP piH0SEXP, SEXP piSEXP, SEXP n_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type piH0(piH0SEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const int >::type n_max(n_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(simon2stage(alpha, beta, piH0, pi, n_max));
    return rcpp_result_gen;
END_RCPP
}
// powerOnePropExact
DataFrame powerOnePropExact(const int n, const double piH0, const double pi, const double alpha);
RcppExport SEXP _lrstat_powerOnePropExact(SEXP nSEXP, SEXP piH0SEXP, SEXP piSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type piH0(piH0SEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(powerOnePropExact(n, piH0, pi, alpha));
    return rcpp_result_gen;
END_RCPP
}
// samplesizeOnePropExact
DataFrame samplesizeOnePropExact(const double beta, const double piH0, const double pi, const double alpha);
RcppExport SEXP _lrstat_samplesizeOnePropExact(SEXP betaSEXP, SEXP piH0SEXP, SEXP piSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type piH0(piH0SEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(samplesizeOnePropExact(beta, piH0, pi, alpha));
    return rcpp_result_gen;
END_RCPP
}
// powerOneRateExact
DataFrame powerOneRateExact(const int n, const double lambdaH0, const double lambda, const double D, const double alpha);
RcppExport SEXP _lrstat_powerOneRateExact(SEXP nSEXP, SEXP lambdaH0SEXP, SEXP lambdaSEXP, SEXP DSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type lambdaH0(lambdaH0SEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(powerOneRateExact(n, lambdaH0, lambda, D, alpha));
    return rcpp_result_gen;
END_RCPP
}
// samplesizeOneRateExact
DataFrame samplesizeOneRateExact(const double beta, const double lambdaH0, const double lambda, const double D, const double alpha);
RcppExport SEXP _lrstat_samplesizeOneRateExact(SEXP betaSEXP, SEXP lambdaH0SEXP, SEXP lambdaSEXP, SEXP DSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambdaH0(lambdaH0SEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type D(DSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(samplesizeOneRateExact(beta, lambdaH0, lambda, D, alpha));
    return rcpp_result_gen;
END_RCPP
}
// powerFisherExact
DataFrame powerFisherExact(const int n, const double pi1, const double pi2, const double allocationRatioPlanned, const double alpha);
RcppExport SEXP _lrstat_powerFisherExact(SEXP nSEXP, SEXP pi1SEXP, SEXP pi2SEXP, SEXP allocationRatioPlannedSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< const double >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(powerFisherExact(n, pi1, pi2, allocationRatioPlanned, alpha));
    return rcpp_result_gen;
END_RCPP
}
// samplesizeFisherExact
DataFrame samplesizeFisherExact(const double beta, const double pi1, const double pi2, const double allocationRatioPlanned, const double alpha);
RcppExport SEXP _lrstat_samplesizeFisherExact(SEXP betaSEXP, SEXP pi1SEXP, SEXP pi2SEXP, SEXP allocationRatioPlannedSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< const double >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(samplesizeFisherExact(beta, pi1, pi2, allocationRatioPlanned, alpha));
    return rcpp_result_gen;
END_RCPP
}
// remlRiskDiff
NumericVector remlRiskDiff(const double riskDiffH0, const double n1, const double y1, const double n2, const double y2);
RcppExport SEXP _lrstat_remlRiskDiff(SEXP riskDiffH0SEXP, SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type riskDiffH0(riskDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const double >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const double >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(remlRiskDiff(riskDiffH0, n1, y1, n2, y2));
    return rcpp_result_gen;
END_RCPP
}
// remlRiskDiff2
DataFrame remlRiskDiff2(const double riskDiffH0, const NumericVector& n1, const NumericVector& y1, const NumericVector& n2, const NumericVector& y2);
RcppExport SEXP _lrstat_remlRiskDiff2(SEXP riskDiffH0SEXP, SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type riskDiffH0(riskDiffH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(remlRiskDiff2(riskDiffH0, n1, y1, n2, y2));
    return rcpp_result_gen;
END_RCPP
}
// zstatRiskDiff
double zstatRiskDiff(const double riskDiffH0, const NumericVector& n1, const NumericVector& y1, const NumericVector& n2, const NumericVector& y2);
RcppExport SEXP _lrstat_zstatRiskDiff(SEXP riskDiffH0SEXP, SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type riskDiffH0(riskDiffH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(zstatRiskDiff(riskDiffH0, n1, y1, n2, y2));
    return rcpp_result_gen;
END_RCPP
}
// mnRiskDiffCI
List mnRiskDiffCI(const NumericVector& n1, const NumericVector& y1, const NumericVector& n2, const NumericVector& y2, const double cilevel);
RcppExport SEXP _lrstat_mnRiskDiffCI(SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP, SEXP cilevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const double >::type cilevel(cilevelSEXP);
    rcpp_result_gen = Rcpp::wrap(mnRiskDiffCI(n1, y1, n2, y2, cilevel));
    return rcpp_result_gen;
END_RCPP
}
// remlRiskRatio
NumericVector remlRiskRatio(const double riskRatioH0, const double n1, const double y1, const double n2, const double y2);
RcppExport SEXP _lrstat_remlRiskRatio(SEXP riskRatioH0SEXP, SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type riskRatioH0(riskRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const double >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const double >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(remlRiskRatio(riskRatioH0, n1, y1, n2, y2));
    return rcpp_result_gen;
END_RCPP
}
// remlRiskRatio2
DataFrame remlRiskRatio2(const double riskRatioH0, const NumericVector& n1, const NumericVector& y1, const NumericVector& n2, const NumericVector& y2);
RcppExport SEXP _lrstat_remlRiskRatio2(SEXP riskRatioH0SEXP, SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type riskRatioH0(riskRatioH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(remlRiskRatio2(riskRatioH0, n1, y1, n2, y2));
    return rcpp_result_gen;
END_RCPP
}
// zstatRiskRatio
double zstatRiskRatio(const double riskRatioH0, const NumericVector& n1, const NumericVector& y1, const NumericVector& n2, const NumericVector& y2);
RcppExport SEXP _lrstat_zstatRiskRatio(SEXP riskRatioH0SEXP, SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type riskRatioH0(riskRatioH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(zstatRiskRatio(riskRatioH0, n1, y1, n2, y2));
    return rcpp_result_gen;
END_RCPP
}
// mnRiskRatioCI
List mnRiskRatioCI(const NumericVector& n1, const NumericVector& y1, const NumericVector& n2, const NumericVector& y2, const double cilevel);
RcppExport SEXP _lrstat_mnRiskRatioCI(SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP, SEXP cilevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const double >::type cilevel(cilevelSEXP);
    rcpp_result_gen = Rcpp::wrap(mnRiskRatioCI(n1, y1, n2, y2, cilevel));
    return rcpp_result_gen;
END_RCPP
}
// remlOddsRatio
NumericVector remlOddsRatio(const double oddsRatioH0, const double n1, const double y1, const double n2, const double y2);
RcppExport SEXP _lrstat_remlOddsRatio(SEXP oddsRatioH0SEXP, SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type oddsRatioH0(oddsRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const double >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const double >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(remlOddsRatio(oddsRatioH0, n1, y1, n2, y2));
    return rcpp_result_gen;
END_RCPP
}
// remlOddsRatio2
DataFrame remlOddsRatio2(const double oddsRatioH0, const NumericVector& n1, const NumericVector& y1, const NumericVector& n2, const NumericVector& y2);
RcppExport SEXP _lrstat_remlOddsRatio2(SEXP oddsRatioH0SEXP, SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type oddsRatioH0(oddsRatioH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(remlOddsRatio2(oddsRatioH0, n1, y1, n2, y2));
    return rcpp_result_gen;
END_RCPP
}
// zstatOddsRatio
double zstatOddsRatio(const double oddsRatioH0, const NumericVector& n1, const NumericVector& y1, const NumericVector& n2, const NumericVector& y2);
RcppExport SEXP _lrstat_zstatOddsRatio(SEXP oddsRatioH0SEXP, SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type oddsRatioH0(oddsRatioH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(zstatOddsRatio(oddsRatioH0, n1, y1, n2, y2));
    return rcpp_result_gen;
END_RCPP
}
// mnOddsRatioCI
List mnOddsRatioCI(const NumericVector& n1, const NumericVector& y1, const NumericVector& n2, const NumericVector& y2, const double cilevel);
RcppExport SEXP _lrstat_mnOddsRatioCI(SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP, SEXP cilevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const double >::type cilevel(cilevelSEXP);
    rcpp_result_gen = Rcpp::wrap(mnOddsRatioCI(n1, y1, n2, y2, cilevel));
    return rcpp_result_gen;
END_RCPP
}
// remlRateDiff
NumericVector remlRateDiff(const double rateDiffH0, const double t1, const double y1, const double t2, const double y2);
RcppExport SEXP _lrstat_remlRateDiff(SEXP rateDiffH0SEXP, SEXP t1SEXP, SEXP y1SEXP, SEXP t2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type rateDiffH0(rateDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const double >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(remlRateDiff(rateDiffH0, t1, y1, t2, y2));
    return rcpp_result_gen;
END_RCPP
}
// remlRateDiff2
DataFrame remlRateDiff2(const double rateDiffH0, const NumericVector& t1, const NumericVector& y1, const NumericVector& t2, const NumericVector& y2);
RcppExport SEXP _lrstat_remlRateDiff2(SEXP rateDiffH0SEXP, SEXP t1SEXP, SEXP y1SEXP, SEXP t2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type rateDiffH0(rateDiffH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(remlRateDiff2(rateDiffH0, t1, y1, t2, y2));
    return rcpp_result_gen;
END_RCPP
}
// zstatRateDiff
double zstatRateDiff(const double rateDiffH0, const NumericVector& t1, const NumericVector& y1, const NumericVector& t2, const NumericVector& y2);
RcppExport SEXP _lrstat_zstatRateDiff(SEXP rateDiffH0SEXP, SEXP t1SEXP, SEXP y1SEXP, SEXP t2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type rateDiffH0(rateDiffH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(zstatRateDiff(rateDiffH0, t1, y1, t2, y2));
    return rcpp_result_gen;
END_RCPP
}
// mnRateDiffCI
List mnRateDiffCI(const NumericVector& t1, const NumericVector& y1, const NumericVector& t2, const NumericVector& y2, const double cilevel);
RcppExport SEXP _lrstat_mnRateDiffCI(SEXP t1SEXP, SEXP y1SEXP, SEXP t2SEXP, SEXP y2SEXP, SEXP cilevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const double >::type cilevel(cilevelSEXP);
    rcpp_result_gen = Rcpp::wrap(mnRateDiffCI(t1, y1, t2, y2, cilevel));
    return rcpp_result_gen;
END_RCPP
}
// remlRateRatio
NumericVector remlRateRatio(const double rateRatioH0, const double t1, const double y1, const double t2, const double y2);
RcppExport SEXP _lrstat_remlRateRatio(SEXP rateRatioH0SEXP, SEXP t1SEXP, SEXP y1SEXP, SEXP t2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type rateRatioH0(rateRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const double >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const double >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(remlRateRatio(rateRatioH0, t1, y1, t2, y2));
    return rcpp_result_gen;
END_RCPP
}
// remlRateRatio2
DataFrame remlRateRatio2(const double rateRatioH0, const NumericVector& t1, const NumericVector& y1, const NumericVector& t2, const NumericVector& y2);
RcppExport SEXP _lrstat_remlRateRatio2(SEXP rateRatioH0SEXP, SEXP t1SEXP, SEXP y1SEXP, SEXP t2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type rateRatioH0(rateRatioH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(remlRateRatio2(rateRatioH0, t1, y1, t2, y2));
    return rcpp_result_gen;
END_RCPP
}
// zstatRateRatio
double zstatRateRatio(const double rateRatioH0, const NumericVector& t1, const NumericVector& y1, const NumericVector& t2, const NumericVector& y2);
RcppExport SEXP _lrstat_zstatRateRatio(SEXP rateRatioH0SEXP, SEXP t1SEXP, SEXP y1SEXP, SEXP t2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type rateRatioH0(rateRatioH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(zstatRateRatio(rateRatioH0, t1, y1, t2, y2));
    return rcpp_result_gen;
END_RCPP
}
// mnRateRatioCI
List mnRateRatioCI(const NumericVector& t1, const NumericVector& y1, const NumericVector& t2, const NumericVector& y2, const double cilevel);
RcppExport SEXP _lrstat_mnRateRatioCI(SEXP t1SEXP, SEXP y1SEXP, SEXP t2SEXP, SEXP y2SEXP, SEXP cilevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const double >::type cilevel(cilevelSEXP);
    rcpp_result_gen = Rcpp::wrap(mnRateRatioCI(t1, y1, t2, y2, cilevel));
    return rcpp_result_gen;
END_RCPP
}
// powerRiskDiffExact
DataFrame powerRiskDiffExact(const int n, const double riskDiffH0, const double pi1, const double pi2, const double allocationRatioPlanned, const double alpha, const bool calculateAttainedAlpha);
RcppExport SEXP _lrstat_powerRiskDiffExact(SEXP nSEXP, SEXP riskDiffH0SEXP, SEXP pi1SEXP, SEXP pi2SEXP, SEXP allocationRatioPlannedSEXP, SEXP alphaSEXP, SEXP calculateAttainedAlphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type riskDiffH0(riskDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< const double >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const bool >::type calculateAttainedAlpha(calculateAttainedAlphaSEXP);
    rcpp_result_gen = Rcpp::wrap(powerRiskDiffExact(n, riskDiffH0, pi1, pi2, allocationRatioPlanned, alpha, calculateAttainedAlpha));
    return rcpp_result_gen;
END_RCPP
}
// samplesizeRiskDiffExact
DataFrame samplesizeRiskDiffExact(const double beta, const double riskDiffH0, const double pi1, const double pi2, const double allocationRatioPlanned, const double alpha);
RcppExport SEXP _lrstat_samplesizeRiskDiffExact(SEXP betaSEXP, SEXP riskDiffH0SEXP, SEXP pi1SEXP, SEXP pi2SEXP, SEXP allocationRatioPlannedSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type riskDiffH0(riskDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< const double >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(samplesizeRiskDiffExact(beta, riskDiffH0, pi1, pi2, allocationRatioPlanned, alpha));
    return rcpp_result_gen;
END_RCPP
}
// powerRiskRatioExact
DataFrame powerRiskRatioExact(const int n, const double riskRatioH0, const double pi1, const double pi2, const double allocationRatioPlanned, const double alpha, const bool calculateAttainedAlpha);
RcppExport SEXP _lrstat_powerRiskRatioExact(SEXP nSEXP, SEXP riskRatioH0SEXP, SEXP pi1SEXP, SEXP pi2SEXP, SEXP allocationRatioPlannedSEXP, SEXP alphaSEXP, SEXP calculateAttainedAlphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type riskRatioH0(riskRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< const double >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const bool >::type calculateAttainedAlpha(calculateAttainedAlphaSEXP);
    rcpp_result_gen = Rcpp::wrap(powerRiskRatioExact(n, riskRatioH0, pi1, pi2, allocationRatioPlanned, alpha, calculateAttainedAlpha));
    return rcpp_result_gen;
END_RCPP
}
// samplesizeRiskRatioExact
DataFrame samplesizeRiskRatioExact(const double beta, const double riskRatioH0, const double pi1, const double pi2, const double allocationRatioPlanned, const double alpha);
RcppExport SEXP _lrstat_samplesizeRiskRatioExact(SEXP betaSEXP, SEXP riskRatioH0SEXP, SEXP pi1SEXP, SEXP pi2SEXP, SEXP allocationRatioPlannedSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type riskRatioH0(riskRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< const double >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(samplesizeRiskRatioExact(beta, riskRatioH0, pi1, pi2, allocationRatioPlanned, alpha));
    return rcpp_result_gen;
END_RCPP
}
// powerRiskDiffExactEquiv
DataFrame powerRiskDiffExactEquiv(const int n, const double riskDiffLower, const double riskDiffUpper, const double pi1, const double pi2, const double allocationRatioPlanned, const double alpha, const bool calculateAttainedAlpha);
RcppExport SEXP _lrstat_powerRiskDiffExactEquiv(SEXP nSEXP, SEXP riskDiffLowerSEXP, SEXP riskDiffUpperSEXP, SEXP pi1SEXP, SEXP pi2SEXP, SEXP allocationRatioPlannedSEXP, SEXP alphaSEXP, SEXP calculateAttainedAlphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type riskDiffLower(riskDiffLowerSEXP);
    Rcpp::traits::input_parameter< const double >::type riskDiffUpper(riskDiffUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< const double >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const bool >::type calculateAttainedAlpha(calculateAttainedAlphaSEXP);
    rcpp_result_gen = Rcpp::wrap(powerRiskDiffExactEquiv(n, riskDiffLower, riskDiffUpper, pi1, pi2, allocationRatioPlanned, alpha, calculateAttainedAlpha));
    return rcpp_result_gen;
END_RCPP
}
// samplesizeRiskDiffExactEquiv
DataFrame samplesizeRiskDiffExactEquiv(const double beta, const double riskDiffLower, const double riskDiffUpper, const double pi1, const double pi2, const double allocationRatioPlanned, const double alpha);
RcppExport SEXP _lrstat_samplesizeRiskDiffExactEquiv(SEXP betaSEXP, SEXP riskDiffLowerSEXP, SEXP riskDiffUpperSEXP, SEXP pi1SEXP, SEXP pi2SEXP, SEXP allocationRatioPlannedSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type riskDiffLower(riskDiffLowerSEXP);
    Rcpp::traits::input_parameter< const double >::type riskDiffUpper(riskDiffUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< const double >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(samplesizeRiskDiffExactEquiv(beta, riskDiffLower, riskDiffUpper, pi1, pi2, allocationRatioPlanned, alpha));
    return rcpp_result_gen;
END_RCPP
}
// powerRiskRatioExactEquiv
DataFrame powerRiskRatioExactEquiv(const int n, const double riskRatioLower, const double riskRatioUpper, const double pi1, const double pi2, const double allocationRatioPlanned, const double alpha, const bool calculateAttainedAlpha);
RcppExport SEXP _lrstat_powerRiskRatioExactEquiv(SEXP nSEXP, SEXP riskRatioLowerSEXP, SEXP riskRatioUpperSEXP, SEXP pi1SEXP, SEXP pi2SEXP, SEXP allocationRatioPlannedSEXP, SEXP alphaSEXP, SEXP calculateAttainedAlphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type riskRatioLower(riskRatioLowerSEXP);
    Rcpp::traits::input_parameter< const double >::type riskRatioUpper(riskRatioUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< const double >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const bool >::type calculateAttainedAlpha(calculateAttainedAlphaSEXP);
    rcpp_result_gen = Rcpp::wrap(powerRiskRatioExactEquiv(n, riskRatioLower, riskRatioUpper, pi1, pi2, allocationRatioPlanned, alpha, calculateAttainedAlpha));
    return rcpp_result_gen;
END_RCPP
}
// samplesizeRiskRatioExactEquiv
DataFrame samplesizeRiskRatioExactEquiv(const double beta, const double riskRatioLower, const double riskRatioUpper, const double pi1, const double pi2, const double allocationRatioPlanned, const double alpha);
RcppExport SEXP _lrstat_samplesizeRiskRatioExactEquiv(SEXP betaSEXP, SEXP riskRatioLowerSEXP, SEXP riskRatioUpperSEXP, SEXP pi1SEXP, SEXP pi2SEXP, SEXP allocationRatioPlannedSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type riskRatioLower(riskRatioLowerSEXP);
    Rcpp::traits::input_parameter< const double >::type riskRatioUpper(riskRatioUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< const double >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(samplesizeRiskRatioExactEquiv(beta, riskRatioLower, riskRatioUpper, pi1, pi2, allocationRatioPlanned, alpha));
    return rcpp_result_gen;
END_RCPP
}
// riskDiffExactPValue
DataFrame riskDiffExactPValue(const double riskDiffH0, bool directionUpper, const int n1, const int y1, const int n2, const int y2);
RcppExport SEXP _lrstat_riskDiffExactPValue(SEXP riskDiffH0SEXP, SEXP directionUpperSEXP, SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type riskDiffH0(riskDiffH0SEXP);
    Rcpp::traits::input_parameter< bool >::type directionUpper(directionUpperSEXP);
    Rcpp::traits::input_parameter< const int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const int >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const int >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(riskDiffExactPValue(riskDiffH0, directionUpper, n1, y1, n2, y2));
    return rcpp_result_gen;
END_RCPP
}
// riskDiffExactCI
DataFrame riskDiffExactCI(const int n1, const int y1, const int n2, const int y2, const double cilevel);
RcppExport SEXP _lrstat_riskDiffExactCI(SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP, SEXP cilevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const int >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const int >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const double >::type cilevel(cilevelSEXP);
    rcpp_result_gen = Rcpp::wrap(riskDiffExactCI(n1, y1, n2, y2, cilevel));
    return rcpp_result_gen;
END_RCPP
}
// riskRatioExactPValue
DataFrame riskRatioExactPValue(const double riskRatioH0, bool directionUpper, const int n1, const int y1, const int n2, const int y2);
RcppExport SEXP _lrstat_riskRatioExactPValue(SEXP riskRatioH0SEXP, SEXP directionUpperSEXP, SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type riskRatioH0(riskRatioH0SEXP);
    Rcpp::traits::input_parameter< bool >::type directionUpper(directionUpperSEXP);
    Rcpp::traits::input_parameter< const int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const int >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const int >::type y2(y2SEXP);
    rcpp_result_gen = Rcpp::wrap(riskRatioExactPValue(riskRatioH0, directionUpper, n1, y1, n2, y2));
    return rcpp_result_gen;
END_RCPP
}
// riskRatioExactCI
DataFrame riskRatioExactCI(const int n1, const int y1, const int n2, const int y2, const double cilevel);
RcppExport SEXP _lrstat_riskRatioExactCI(SEXP n1SEXP, SEXP y1SEXP, SEXP n2SEXP, SEXP y2SEXP, SEXP cilevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< const int >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< const int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< const int >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< const double >::type cilevel(cilevelSEXP);
    rcpp_result_gen = Rcpp::wrap(riskRatioExactCI(n1, y1, n2, y2, cilevel));
    return rcpp_result_gen;
END_RCPP
}
// nbstat1
List nbstat1(const double time, const double rateRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& kappa1, const NumericVector& kappa2, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const bool nullVariance);
RcppExport SEXP _lrstat_nbstat1(SEXP timeSEXP, SEXP rateRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP kappa1SEXP, SEXP kappa2SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP nullVarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type rateRatioH0(rateRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa1(kappa1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa2(kappa2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const bool >::type nullVariance(nullVarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(nbstat1(time, rateRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, kappa1, kappa2, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, nullVariance));
    return rcpp_result_gen;
END_RCPP
}
// nbstat
List nbstat(const NumericVector& time, const double rateRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& kappa1, const NumericVector& kappa2, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const bool nullVariance);
RcppExport SEXP _lrstat_nbstat(SEXP timeSEXP, SEXP rateRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP kappa1SEXP, SEXP kappa2SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP nullVarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type rateRatioH0(rateRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa1(kappa1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa2(kappa2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const bool >::type nullVariance(nullVarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(nbstat(time, rateRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, kappa1, kappa2, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, nullVariance));
    return rcpp_result_gen;
END_RCPP
}
// nbpower
List nbpower(const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const double rateRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& kappa1, const NumericVector& kappa2, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const NumericVector& spendingTime, const double studyDuration, const bool nullVariance);
RcppExport SEXP _lrstat_nbpower(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP rateRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP kappa1SEXP, SEXP kappa2SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP spendingTimeSEXP, SEXP studyDurationSEXP, SEXP nullVarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type rateRatioH0(rateRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa1(kappa1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa2(kappa2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type studyDuration(studyDurationSEXP);
    Rcpp::traits::input_parameter< const bool >::type nullVariance(nullVarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(nbpower(kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, rateRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, kappa1, kappa2, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, spendingTime, studyDuration, nullVariance));
    return rcpp_result_gen;
END_RCPP
}
// nbsamplesize
List nbsamplesize(const double beta, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const NumericVector& userBetaSpending, const double rateRatioH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& kappa1, const NumericVector& kappa2, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, double accrualDuration, double followupTime, const bool fixedFollowup, const NumericVector& interval, const NumericVector& spendingTime, const bool rounding, const bool nullVariance);
RcppExport SEXP _lrstat_nbsamplesize(SEXP betaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP userBetaSpendingSEXP, SEXP rateRatioH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP kappa1SEXP, SEXP kappa2SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP intervalSEXP, SEXP spendingTimeSEXP, SEXP roundingSEXP, SEXP nullVarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userBetaSpending(userBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type rateRatioH0(rateRatioH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa1(kappa1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa2(kappa2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type rounding(roundingSEXP);
    Rcpp::traits::input_parameter< const bool >::type nullVariance(nullVarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(nbsamplesize(beta, kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, userBetaSpending, rateRatioH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, kappa1, kappa2, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, interval, spendingTime, rounding, nullVariance));
    return rcpp_result_gen;
END_RCPP
}
// nbpower1s
List nbpower1s(const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const double lambdaH0, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& kappa, const NumericVector& lambda, const NumericVector& gamma, const double accrualDuration, const double followupTime, const bool fixedFollowup, const NumericVector& spendingTime, const double studyDuration);
RcppExport SEXP _lrstat_nbpower1s(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP lambdaH0SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP kappaSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP spendingTimeSEXP, SEXP studyDurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type lambdaH0(lambdaH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type studyDuration(studyDurationSEXP);
    rcpp_result_gen = Rcpp::wrap(nbpower1s(kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, lambdaH0, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, kappa, lambda, gamma, accrualDuration, followupTime, fixedFollowup, spendingTime, studyDuration));
    return rcpp_result_gen;
END_RCPP
}
// nbsamplesize1s
List nbsamplesize1s(const double beta, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const NumericVector& userBetaSpending, const double lambdaH0, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& kappa, const NumericVector& lambda, const NumericVector& gamma, double accrualDuration, double followupTime, const bool fixedFollowup, const NumericVector& interval, const NumericVector& spendingTime, const bool rounding);
RcppExport SEXP _lrstat_nbsamplesize1s(SEXP betaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP userBetaSpendingSEXP, SEXP lambdaH0SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP kappaSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP intervalSEXP, SEXP spendingTimeSEXP, SEXP roundingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userBetaSpending(userBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type lambdaH0(lambdaH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type rounding(roundingSEXP);
    rcpp_result_gen = Rcpp::wrap(nbsamplesize1s(beta, kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, userBetaSpending, lambdaH0, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, kappa, lambda, gamma, accrualDuration, followupTime, fixedFollowup, interval, spendingTime, rounding));
    return rcpp_result_gen;
END_RCPP
}
// nbpowerequiv
List nbpowerequiv(const int kMax, const NumericVector& informationRates, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const double rateRatioLower, const double rateRatioUpper, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& kappa1, const NumericVector& kappa2, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const NumericVector& spendingTime, const double studyDuration, const bool nullVariance);
RcppExport SEXP _lrstat_nbpowerequiv(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP rateRatioLowerSEXP, SEXP rateRatioUpperSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP kappa1SEXP, SEXP kappa2SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP spendingTimeSEXP, SEXP studyDurationSEXP, SEXP nullVarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type rateRatioLower(rateRatioLowerSEXP);
    Rcpp::traits::input_parameter< const double >::type rateRatioUpper(rateRatioUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa1(kappa1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa2(kappa2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type studyDuration(studyDurationSEXP);
    Rcpp::traits::input_parameter< const bool >::type nullVariance(nullVarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(nbpowerequiv(kMax, informationRates, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, rateRatioLower, rateRatioUpper, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, kappa1, kappa2, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, spendingTime, studyDuration, nullVariance));
    return rcpp_result_gen;
END_RCPP
}
// nbsamplesizeequiv
List nbsamplesizeequiv(const double beta, const int kMax, const NumericVector& informationRates, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const double rateRatioLower, const double rateRatioUpper, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& kappa1, const NumericVector& kappa2, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, double accrualDuration, double followupTime, const bool fixedFollowup, const NumericVector& interval, const NumericVector& spendingTime, const bool rounding, const bool nullVariance);
RcppExport SEXP _lrstat_nbsamplesizeequiv(SEXP betaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP rateRatioLowerSEXP, SEXP rateRatioUpperSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP kappa1SEXP, SEXP kappa2SEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP intervalSEXP, SEXP spendingTimeSEXP, SEXP roundingSEXP, SEXP nullVarianceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type rateRatioLower(rateRatioLowerSEXP);
    Rcpp::traits::input_parameter< const double >::type rateRatioUpper(rateRatioUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa1(kappa1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type kappa2(kappa2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type rounding(roundingSEXP);
    Rcpp::traits::input_parameter< const bool >::type nullVariance(nullVarianceSEXP);
    rcpp_result_gen = Rcpp::wrap(nbsamplesizeequiv(beta, kMax, informationRates, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, rateRatioLower, rateRatioUpper, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, kappa1, kappa2, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, interval, spendingTime, rounding, nullVariance));
    return rcpp_result_gen;
END_RCPP
}
// rmst
double rmst(const double t1, const double t2, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda);
RcppExport SEXP _lrstat_rmst(SEXP t1SEXP, SEXP t2SEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmst(t1, t2, piecewiseSurvivalTime, lambda));
    return rcpp_result_gen;
END_RCPP
}
// covrmst
NumericVector covrmst(const double t2, const double tau1, const double tau2, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double maxFollowupTime);
RcppExport SEXP _lrstat_covrmst(SEXP t2SEXP, SEXP tau1SEXP, SEXP tau2SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP maxFollowupTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const double >::type tau1(tau1SEXP);
    Rcpp::traits::input_parameter< const double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type maxFollowupTime(maxFollowupTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(covrmst(t2, tau1, tau2, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, lambda1, lambda2, gamma1, gamma2, accrualDuration, maxFollowupTime));
    return rcpp_result_gen;
END_RCPP
}
// rmstat1
DataFrame rmstat1(const double time, const double milestone, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup);
RcppExport SEXP _lrstat_rmstat1(SEXP timeSEXP, SEXP milestoneSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    rcpp_result_gen = Rcpp::wrap(rmstat1(time, milestone, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup));
    return rcpp_result_gen;
END_RCPP
}
// rmstat
DataFrame rmstat(const NumericVector& time, const double milestone, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup);
RcppExport SEXP _lrstat_rmstat(SEXP timeSEXP, SEXP milestoneSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    rcpp_result_gen = Rcpp::wrap(rmstat(time, milestone, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup));
    return rcpp_result_gen;
END_RCPP
}
// rmpower
List rmpower(const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const double milestone, const double rmstDiffH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const NumericVector& spendingTime, const double studyDuration);
RcppExport SEXP _lrstat_rmpower(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP milestoneSEXP, SEXP rmstDiffH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP spendingTimeSEXP, SEXP studyDurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type rmstDiffH0(rmstDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type studyDuration(studyDurationSEXP);
    rcpp_result_gen = Rcpp::wrap(rmpower(kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, milestone, rmstDiffH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, spendingTime, studyDuration));
    return rcpp_result_gen;
END_RCPP
}
// rmsamplesize
List rmsamplesize(const double beta, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const NumericVector& userBetaSpending, const double milestone, const double rmstDiffH0, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, double accrualDuration, double followupTime, const bool fixedFollowup, const NumericVector& interval, const NumericVector& spendingTime, const bool rounding);
RcppExport SEXP _lrstat_rmsamplesize(SEXP betaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP userBetaSpendingSEXP, SEXP milestoneSEXP, SEXP rmstDiffH0SEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP intervalSEXP, SEXP spendingTimeSEXP, SEXP roundingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userBetaSpending(userBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type rmstDiffH0(rmstDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type rounding(roundingSEXP);
    rcpp_result_gen = Rcpp::wrap(rmsamplesize(beta, kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, userBetaSpending, milestone, rmstDiffH0, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, interval, spendingTime, rounding));
    return rcpp_result_gen;
END_RCPP
}
// rmpower1s
List rmpower1s(const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const double milestone, const double rmstH0, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda, const NumericVector& gamma, const double accrualDuration, const double followupTime, const bool fixedFollowup, const NumericVector& spendingTime, const double studyDuration);
RcppExport SEXP _lrstat_rmpower1s(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP milestoneSEXP, SEXP rmstH0SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP spendingTimeSEXP, SEXP studyDurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type rmstH0(rmstH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type studyDuration(studyDurationSEXP);
    rcpp_result_gen = Rcpp::wrap(rmpower1s(kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, milestone, rmstH0, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda, gamma, accrualDuration, followupTime, fixedFollowup, spendingTime, studyDuration));
    return rcpp_result_gen;
END_RCPP
}
// rmsamplesize1s
List rmsamplesize1s(const double beta, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const NumericVector& userBetaSpending, const double milestone, const double rmstH0, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda, const NumericVector& gamma, double accrualDuration, double followupTime, const bool fixedFollowup, const NumericVector& interval, const NumericVector& spendingTime, const bool rounding);
RcppExport SEXP _lrstat_rmsamplesize1s(SEXP betaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP userBetaSpendingSEXP, SEXP milestoneSEXP, SEXP rmstH0SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP intervalSEXP, SEXP spendingTimeSEXP, SEXP roundingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userBetaSpending(userBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type rmstH0(rmstH0SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type rounding(roundingSEXP);
    rcpp_result_gen = Rcpp::wrap(rmsamplesize1s(beta, kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, userBetaSpending, milestone, rmstH0, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda, gamma, accrualDuration, followupTime, fixedFollowup, interval, spendingTime, rounding));
    return rcpp_result_gen;
END_RCPP
}
// rmpowerequiv
List rmpowerequiv(const int kMax, const NumericVector& informationRates, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const double milestone, const double rmstDiffLower, const double rmstDiffUpper, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double followupTime, const bool fixedFollowup, const NumericVector& spendingTime, const double studyDuration);
RcppExport SEXP _lrstat_rmpowerequiv(SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP milestoneSEXP, SEXP rmstDiffLowerSEXP, SEXP rmstDiffUpperSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP spendingTimeSEXP, SEXP studyDurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type rmstDiffLower(rmstDiffLowerSEXP);
    Rcpp::traits::input_parameter< const double >::type rmstDiffUpper(rmstDiffUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type studyDuration(studyDurationSEXP);
    rcpp_result_gen = Rcpp::wrap(rmpowerequiv(kMax, informationRates, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, milestone, rmstDiffLower, rmstDiffUpper, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, spendingTime, studyDuration));
    return rcpp_result_gen;
END_RCPP
}
// rmsamplesizeequiv
List rmsamplesizeequiv(const double beta, const int kMax, const NumericVector& informationRates, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const double milestone, const double rmstDiffLower, const double rmstDiffUpper, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& stratumFraction, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, double accrualDuration, double followupTime, const bool fixedFollowup, const NumericVector& interval, const NumericVector& spendingTime, const bool rounding);
RcppExport SEXP _lrstat_rmsamplesizeequiv(SEXP betaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP milestoneSEXP, SEXP rmstDiffLowerSEXP, SEXP rmstDiffUpperSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP stratumFractionSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP followupTimeSEXP, SEXP fixedFollowupSEXP, SEXP intervalSEXP, SEXP spendingTimeSEXP, SEXP roundingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type rmstDiffLower(rmstDiffLowerSEXP);
    Rcpp::traits::input_parameter< const double >::type rmstDiffUpper(rmstDiffUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type stratumFraction(stratumFractionSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< double >::type followupTime(followupTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type fixedFollowup(fixedFollowupSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type interval(intervalSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type rounding(roundingSEXP);
    rcpp_result_gen = Rcpp::wrap(rmsamplesizeequiv(beta, kMax, informationRates, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, milestone, rmstDiffLower, rmstDiffUpper, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, stratumFraction, lambda1, lambda2, gamma1, gamma2, accrualDuration, followupTime, fixedFollowup, interval, spendingTime, rounding));
    return rcpp_result_gen;
END_RCPP
}
// rmest
DataFrame rmest(const DataFrame data, const std::string rep, const std::string stratum, const std::string time, const std::string event, const double milestone, const double confint, const bool biascorrection);
RcppExport SEXP _lrstat_rmest(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP milestoneSEXP, SEXP confintSEXP, SEXP biascorrectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const std::string >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type confint(confintSEXP);
    Rcpp::traits::input_parameter< const bool >::type biascorrection(biascorrectionSEXP);
    rcpp_result_gen = Rcpp::wrap(rmest(data, rep, stratum, time, event, milestone, confint, biascorrection));
    return rcpp_result_gen;
END_RCPP
}
// rmdiff
DataFrame rmdiff(const DataFrame data, const std::string rep, const std::string stratum, const std::string treat, const std::string time, const std::string event, const double milestone, const double rmstDiffH0, const double confint, const bool biascorrection);
RcppExport SEXP _lrstat_rmdiff(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP treatSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP milestoneSEXP, SEXP rmstDiffH0SEXP, SEXP confintSEXP, SEXP biascorrectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const std::string >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type milestone(milestoneSEXP);
    Rcpp::traits::input_parameter< const double >::type rmstDiffH0(rmstDiffH0SEXP);
    Rcpp::traits::input_parameter< const double >::type confint(confintSEXP);
    Rcpp::traits::input_parameter< const bool >::type biascorrection(biascorrectionSEXP);
    rcpp_result_gen = Rcpp::wrap(rmdiff(data, rep, stratum, treat, time, event, milestone, rmstDiffH0, confint, biascorrection));
    return rcpp_result_gen;
END_RCPP
}
// rpsft
List rpsft(const DataFrame data, const std::string stratum, const std::string time, const std::string event, const std::string treat, const std::string rx, const std::string censor_time, const StringVector& base_cov, const double low_psi, const double hi_psi, const int n_eval_z, const double alpha, const double treat_modifier, const bool recensor, const bool autoswitch, const bool gridsearch, const bool boot, const int n_boot);
RcppExport SEXP _lrstat_rpsft(SEXP dataSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP treatSEXP, SEXP rxSEXP, SEXP censor_timeSEXP, SEXP base_covSEXP, SEXP low_psiSEXP, SEXP hi_psiSEXP, SEXP n_eval_zSEXP, SEXP alphaSEXP, SEXP treat_modifierSEXP, SEXP recensorSEXP, SEXP autoswitchSEXP, SEXP gridsearchSEXP, SEXP bootSEXP, SEXP n_bootSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type rx(rxSEXP);
    Rcpp::traits::input_parameter< const std::string >::type censor_time(censor_timeSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type base_cov(base_covSEXP);
    Rcpp::traits::input_parameter< const double >::type low_psi(low_psiSEXP);
    Rcpp::traits::input_parameter< const double >::type hi_psi(hi_psiSEXP);
    Rcpp::traits::input_parameter< const int >::type n_eval_z(n_eval_zSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type treat_modifier(treat_modifierSEXP);
    Rcpp::traits::input_parameter< const bool >::type recensor(recensorSEXP);
    Rcpp::traits::input_parameter< const bool >::type autoswitch(autoswitchSEXP);
    Rcpp::traits::input_parameter< const bool >::type gridsearch(gridsearchSEXP);
    Rcpp::traits::input_parameter< const bool >::type boot(bootSEXP);
    Rcpp::traits::input_parameter< const int >::type n_boot(n_bootSEXP);
    rcpp_result_gen = Rcpp::wrap(rpsft(data, stratum, time, event, treat, rx, censor_time, base_cov, low_psi, hi_psi, n_eval_z, alpha, treat_modifier, recensor, autoswitch, gridsearch, boot, n_boot));
    return rcpp_result_gen;
END_RCPP
}
// kmest
DataFrame kmest(const DataFrame data, const std::string rep, const std::string stratum, const std::string time, const std::string event, const std::string conftype, const double confint);
RcppExport SEXP _lrstat_kmest(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP conftypeSEXP, SEXP confintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const std::string >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const std::string >::type conftype(conftypeSEXP);
    Rcpp::traits::input_parameter< const double >::type confint(confintSEXP);
    rcpp_result_gen = Rcpp::wrap(kmest(data, rep, stratum, time, event, conftype, confint));
    return rcpp_result_gen;
END_RCPP
}
// lrtest
DataFrame lrtest(const DataFrame data, const std::string rep, const std::string stratum, const std::string treat, const std::string time, const std::string event, const double rho1, const double rho2);
RcppExport SEXP _lrstat_lrtest(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP treatSEXP, SEXP timeSEXP, SEXP eventSEXP, SEXP rho1SEXP, SEXP rho2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const std::string >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type treat(treatSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const double >::type rho1(rho1SEXP);
    Rcpp::traits::input_parameter< const double >::type rho2(rho2SEXP);
    rcpp_result_gen = Rcpp::wrap(lrtest(data, rep, stratum, treat, time, event, rho1, rho2));
    return rcpp_result_gen;
END_RCPP
}
// liferegr
List liferegr(const DataFrame data, const std::string rep, const std::string stratum, const std::string time, const std::string time2, const std::string event, const StringVector& covariates, const std::string weight, const std::string id, const std::string dist, bool robust);
RcppExport SEXP _lrstat_liferegr(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP time2SEXP, SEXP eventSEXP, SEXP covariatesSEXP, SEXP weightSEXP, SEXP idSEXP, SEXP distSEXP, SEXP robustSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const std::string >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time2(time2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dist(distSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    rcpp_result_gen = Rcpp::wrap(liferegr(data, rep, stratum, time, time2, event, covariates, weight, id, dist, robust));
    return rcpp_result_gen;
END_RCPP
}
// phregr
List phregr(const DataFrame data, const std::string rep, const std::string stratum, const std::string time, const std::string time2, const std::string event, const StringVector& covariates, const std::string weight, const std::string id, const std::string ties, bool robust);
RcppExport SEXP _lrstat_phregr(SEXP dataSEXP, SEXP repSEXP, SEXP stratumSEXP, SEXP timeSEXP, SEXP time2SEXP, SEXP eventSEXP, SEXP covariatesSEXP, SEXP weightSEXP, SEXP idSEXP, SEXP tiesSEXP, SEXP robustSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::string >::type rep(repSEXP);
    Rcpp::traits::input_parameter< const std::string >::type stratum(stratumSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type time2(time2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type event(eventSEXP);
    Rcpp::traits::input_parameter< const StringVector& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< const std::string >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< const std::string >::type id(idSEXP);
    Rcpp::traits::input_parameter< const std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< bool >::type robust(robustSEXP);
    rcpp_result_gen = Rcpp::wrap(phregr(data, rep, stratum, time, time2, event, covariates, weight, id, ties, robust));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(int seed);
RcppExport SEXP _lrstat_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// stl_sort
NumericVector stl_sort(const NumericVector& x);
RcppExport SEXP _lrstat_stl_sort(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(stl_sort(x));
    return rcpp_result_gen;
END_RCPP
}
// findInterval3
IntegerVector findInterval3(NumericVector x, NumericVector v);
RcppExport SEXP _lrstat_findInterval3(SEXP xSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(findInterval3(x, v));
    return rcpp_result_gen;
END_RCPP
}
// errorSpentcpp
double errorSpentcpp(const double t, const double error, const String sf, const double sfpar);
RcppExport SEXP _lrstat_errorSpentcpp(SEXP tSEXP, SEXP errorSEXP, SEXP sfSEXP, SEXP sfparSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type error(errorSEXP);
    Rcpp::traits::input_parameter< const String >::type sf(sfSEXP);
    Rcpp::traits::input_parameter< const double >::type sfpar(sfparSEXP);
    rcpp_result_gen = Rcpp::wrap(errorSpentcpp(t, error, sf, sfpar));
    return rcpp_result_gen;
END_RCPP
}
// exitprobcpp
List exitprobcpp(const NumericVector& b, const NumericVector& a, const NumericVector& theta, const NumericVector& I);
RcppExport SEXP _lrstat_exitprobcpp(SEXP bSEXP, SEXP aSEXP, SEXP thetaSEXP, SEXP ISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I(ISEXP);
    rcpp_result_gen = Rcpp::wrap(exitprobcpp(b, a, theta, I));
    return rcpp_result_gen;
END_RCPP
}
// ptpwexpcpp
NumericVector ptpwexpcpp(const NumericVector& q, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const double lowerBound, const bool lowertail, const bool logp);
RcppExport SEXP _lrstat_ptpwexpcpp(SEXP qSEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP lowerBoundSEXP, SEXP lowertailSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lowerBound(lowerBoundSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(ptpwexpcpp(q, piecewiseSurvivalTime, lambda, lowerBound, lowertail, logp));
    return rcpp_result_gen;
END_RCPP
}
// qtpwexpcpp1
double qtpwexpcpp1(const double p, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const double lowerBound, const bool lowertail, const bool logp);
RcppExport SEXP _lrstat_qtpwexpcpp1(SEXP pSEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP lowerBoundSEXP, SEXP lowertailSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lowerBound(lowerBoundSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(qtpwexpcpp1(p, piecewiseSurvivalTime, lambda, lowerBound, lowertail, logp));
    return rcpp_result_gen;
END_RCPP
}
// qtpwexpcpp
NumericVector qtpwexpcpp(const NumericVector& p, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const double lowerBound, const bool lowertail, const bool logp);
RcppExport SEXP _lrstat_qtpwexpcpp(SEXP pSEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP lowerBoundSEXP, SEXP lowertailSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lowerBound(lowerBoundSEXP);
    Rcpp::traits::input_parameter< const bool >::type lowertail(lowertailSEXP);
    Rcpp::traits::input_parameter< const bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(qtpwexpcpp(p, piecewiseSurvivalTime, lambda, lowerBound, lowertail, logp));
    return rcpp_result_gen;
END_RCPP
}
// rtpwexpcpp
NumericVector rtpwexpcpp(const int n, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const double lowerBound);
RcppExport SEXP _lrstat_rtpwexpcpp(SEXP nSEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP lowerBoundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type lowerBound(lowerBoundSEXP);
    rcpp_result_gen = Rcpp::wrap(rtpwexpcpp(n, piecewiseSurvivalTime, lambda, lowerBound));
    return rcpp_result_gen;
END_RCPP
}
// getBoundcpp
NumericVector getBoundcpp(const int k, const NumericVector& informationRates, const double alpha, const String typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& spendingTime, const LogicalVector& efficacyStopping);
RcppExport SEXP _lrstat_getBoundcpp(SEXP kSEXP, SEXP informationRatesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP spendingTimeSEXP, SEXP efficacyStoppingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const String >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    rcpp_result_gen = Rcpp::wrap(getBoundcpp(k, informationRates, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, spendingTime, efficacyStopping));
    return rcpp_result_gen;
END_RCPP
}
// getPower
List getPower(const double alpha, const int kMax, const NumericVector& b, const NumericVector& theta, const NumericVector& I, const std::string bsf, const double bsfpar, const NumericVector& st, const LogicalVector& futilityStopping, const NumericVector& w);
RcppExport SEXP _lrstat_getPower(SEXP alphaSEXP, SEXP kMaxSEXP, SEXP bSEXP, SEXP thetaSEXP, SEXP ISEXP, SEXP bsfSEXP, SEXP bsfparSEXP, SEXP stSEXP, SEXP futilityStoppingSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type I(ISEXP);
    Rcpp::traits::input_parameter< const std::string >::type bsf(bsfSEXP);
    Rcpp::traits::input_parameter< const double >::type bsfpar(bsfparSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type st(stSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(getPower(alpha, kMax, b, theta, I, bsf, bsfpar, st, futilityStopping, w));
    return rcpp_result_gen;
END_RCPP
}
// accrual
NumericVector accrual(const NumericVector& time, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const double accrualDuration);
RcppExport SEXP _lrstat_accrual(SEXP timeSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP accrualDurationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    rcpp_result_gen = Rcpp::wrap(accrual(time, accrualTime, accrualIntensity, accrualDuration));
    return rcpp_result_gen;
END_RCPP
}
// getAccrualDurationFromN
NumericVector getAccrualDurationFromN(const NumericVector& nsubjects, const NumericVector& accrualTime, const NumericVector& accrualIntensity);
RcppExport SEXP _lrstat_getAccrualDurationFromN(SEXP nsubjectsSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type nsubjects(nsubjectsSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    rcpp_result_gen = Rcpp::wrap(getAccrualDurationFromN(nsubjects, accrualTime, accrualIntensity));
    return rcpp_result_gen;
END_RCPP
}
// patrisk
NumericVector patrisk(const NumericVector& time, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const NumericVector& gamma);
RcppExport SEXP _lrstat_patrisk(SEXP timeSEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(patrisk(time, piecewiseSurvivalTime, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// pevent
NumericVector pevent(const NumericVector& time, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const NumericVector& gamma);
RcppExport SEXP _lrstat_pevent(SEXP timeSEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(pevent(time, piecewiseSurvivalTime, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// hd
double hd(const int j, const double t1, const double t2, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const NumericVector& gamma);
RcppExport SEXP _lrstat_hd(SEXP jSEXP, SEXP t1SEXP, SEXP t2SEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type j(jSEXP);
    Rcpp::traits::input_parameter< const double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(hd(j, t1, t2, piecewiseSurvivalTime, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// pd
double pd(const double t1, const double t2, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const NumericVector& gamma);
RcppExport SEXP _lrstat_pd(SEXP t1SEXP, SEXP t2SEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< const double >::type t2(t2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(pd(t1, t2, piecewiseSurvivalTime, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// ad
NumericVector ad(const NumericVector& time, const double u1, const double u2, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda, const NumericVector& gamma);
RcppExport SEXP _lrstat_ad(SEXP timeSEXP, SEXP u1SEXP, SEXP u2SEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambdaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< const double >::type u2(u2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(ad(time, u1, u2, accrualTime, accrualIntensity, piecewiseSurvivalTime, lambda, gamma));
    return rcpp_result_gen;
END_RCPP
}
// natrisk
NumericMatrix natrisk(const NumericVector& time, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double minFollowupTime, const double maxFollowupTime);
RcppExport SEXP _lrstat_natrisk(SEXP timeSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP minFollowupTimeSEXP, SEXP maxFollowupTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type minFollowupTime(minFollowupTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type maxFollowupTime(maxFollowupTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(natrisk(time, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, lambda1, lambda2, gamma1, gamma2, accrualDuration, minFollowupTime, maxFollowupTime));
    return rcpp_result_gen;
END_RCPP
}
// nevent
NumericMatrix nevent(const NumericVector& time, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double minFollowupTime, const double maxFollowupTime);
RcppExport SEXP _lrstat_nevent(SEXP timeSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP minFollowupTimeSEXP, SEXP maxFollowupTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type minFollowupTime(minFollowupTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type maxFollowupTime(maxFollowupTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(nevent(time, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, lambda1, lambda2, gamma1, gamma2, accrualDuration, minFollowupTime, maxFollowupTime));
    return rcpp_result_gen;
END_RCPP
}
// nevent2
NumericMatrix nevent2(const NumericVector& time, const double allocationRatioPlanned, const NumericVector& accrualTime, const NumericVector& accrualIntensity, const NumericVector& piecewiseSurvivalTime, const NumericVector& lambda1, const NumericVector& lambda2, const NumericVector& gamma1, const NumericVector& gamma2, const double accrualDuration, const double minFollowupTime, const double maxFollowupTime);
RcppExport SEXP _lrstat_nevent2(SEXP timeSEXP, SEXP allocationRatioPlannedSEXP, SEXP accrualTimeSEXP, SEXP accrualIntensitySEXP, SEXP piecewiseSurvivalTimeSEXP, SEXP lambda1SEXP, SEXP lambda2SEXP, SEXP gamma1SEXP, SEXP gamma2SEXP, SEXP accrualDurationSEXP, SEXP minFollowupTimeSEXP, SEXP maxFollowupTimeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type time(timeSEXP);
    Rcpp::traits::input_parameter< const double >::type allocationRatioPlanned(allocationRatioPlannedSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualTime(accrualTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type accrualIntensity(accrualIntensitySEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type piecewiseSurvivalTime(piecewiseSurvivalTimeSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda1(lambda1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma1(gamma1SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type gamma2(gamma2SEXP);
    Rcpp::traits::input_parameter< const double >::type accrualDuration(accrualDurationSEXP);
    Rcpp::traits::input_parameter< const double >::type minFollowupTime(minFollowupTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type maxFollowupTime(maxFollowupTimeSEXP);
    rcpp_result_gen = Rcpp::wrap(nevent2(time, allocationRatioPlanned, accrualTime, accrualIntensity, piecewiseSurvivalTime, lambda1, lambda2, gamma1, gamma2, accrualDuration, minFollowupTime, maxFollowupTime));
    return rcpp_result_gen;
END_RCPP
}
// getDesign
List getDesign(const double beta, const double IMax, const double theta, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const NumericVector& userBetaSpending, const NumericVector& spendingTime, const double varianceRatio);
RcppExport SEXP _lrstat_getDesign(SEXP betaSEXP, SEXP IMaxSEXP, SEXP thetaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP userBetaSpendingSEXP, SEXP spendingTimeSEXP, SEXP varianceRatioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type IMax(IMaxSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userBetaSpending(userBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type varianceRatio(varianceRatioSEXP);
    rcpp_result_gen = Rcpp::wrap(getDesign(beta, IMax, theta, kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, userBetaSpending, spendingTime, varianceRatio));
    return rcpp_result_gen;
END_RCPP
}
// getDesignEquiv
List getDesignEquiv(const double beta, const double IMax, const double thetaLower, const double thetaUpper, const double theta, const int kMax, const NumericVector& informationRates, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& spendingTime, const double varianceRatioH10, const double varianceRatioH20, const double varianceRatioH12, const double varianceRatioH21);
RcppExport SEXP _lrstat_getDesignEquiv(SEXP betaSEXP, SEXP IMaxSEXP, SEXP thetaLowerSEXP, SEXP thetaUpperSEXP, SEXP thetaSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP spendingTimeSEXP, SEXP varianceRatioH10SEXP, SEXP varianceRatioH20SEXP, SEXP varianceRatioH12SEXP, SEXP varianceRatioH21SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double >::type IMax(IMaxSEXP);
    Rcpp::traits::input_parameter< const double >::type thetaLower(thetaLowerSEXP);
    Rcpp::traits::input_parameter< const double >::type thetaUpper(thetaUpperSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const double >::type varianceRatioH10(varianceRatioH10SEXP);
    Rcpp::traits::input_parameter< const double >::type varianceRatioH20(varianceRatioH20SEXP);
    Rcpp::traits::input_parameter< const double >::type varianceRatioH12(varianceRatioH12SEXP);
    Rcpp::traits::input_parameter< const double >::type varianceRatioH21(varianceRatioH21SEXP);
    rcpp_result_gen = Rcpp::wrap(getDesignEquiv(beta, IMax, thetaLower, thetaUpper, theta, kMax, informationRates, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, spendingTime, varianceRatioH10, varianceRatioH20, varianceRatioH12, varianceRatioH21));
    return rcpp_result_gen;
END_RCPP
}
// adaptDesign
List adaptDesign(double betaNew, double INew, const int L, const double zL, const double theta, const double IMax, const int kMax, const NumericVector& informationRates, const LogicalVector& efficacyStopping, const LogicalVector& futilityStopping, const NumericVector& criticalValues, const double alpha, const std::string typeAlphaSpending, const double parameterAlphaSpending, const NumericVector& userAlphaSpending, const NumericVector& futilityBounds, const std::string typeBetaSpending, const double parameterBetaSpending, const NumericVector& spendingTime, const bool MullerSchafer, const int kNew, const NumericVector& informationRatesNew, const LogicalVector& efficacyStoppingNew, const LogicalVector& futilityStoppingNew, const std::string typeAlphaSpendingNew, const double parameterAlphaSpendingNew, const std::string typeBetaSpendingNew, const double parameterBetaSpendingNew, const NumericVector& userBetaSpendingNew, const NumericVector& spendingTimeNew, const double varianceRatio);
RcppExport SEXP _lrstat_adaptDesign(SEXP betaNewSEXP, SEXP INewSEXP, SEXP LSEXP, SEXP zLSEXP, SEXP thetaSEXP, SEXP IMaxSEXP, SEXP kMaxSEXP, SEXP informationRatesSEXP, SEXP efficacyStoppingSEXP, SEXP futilityStoppingSEXP, SEXP criticalValuesSEXP, SEXP alphaSEXP, SEXP typeAlphaSpendingSEXP, SEXP parameterAlphaSpendingSEXP, SEXP userAlphaSpendingSEXP, SEXP futilityBoundsSEXP, SEXP typeBetaSpendingSEXP, SEXP parameterBetaSpendingSEXP, SEXP spendingTimeSEXP, SEXP MullerSchaferSEXP, SEXP kNewSEXP, SEXP informationRatesNewSEXP, SEXP efficacyStoppingNewSEXP, SEXP futilityStoppingNewSEXP, SEXP typeAlphaSpendingNewSEXP, SEXP parameterAlphaSpendingNewSEXP, SEXP typeBetaSpendingNewSEXP, SEXP parameterBetaSpendingNewSEXP, SEXP userBetaSpendingNewSEXP, SEXP spendingTimeNewSEXP, SEXP varianceRatioSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type betaNew(betaNewSEXP);
    Rcpp::traits::input_parameter< double >::type INew(INewSEXP);
    Rcpp::traits::input_parameter< const int >::type L(LSEXP);
    Rcpp::traits::input_parameter< const double >::type zL(zLSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type IMax(IMaxSEXP);
    Rcpp::traits::input_parameter< const int >::type kMax(kMaxSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRates(informationRatesSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStopping(efficacyStoppingSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStopping(futilityStoppingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type criticalValues(criticalValuesSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpending(typeAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpending(parameterAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userAlphaSpending(userAlphaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type futilityBounds(futilityBoundsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpending(typeBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpending(parameterBetaSpendingSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTime(spendingTimeSEXP);
    Rcpp::traits::input_parameter< const bool >::type MullerSchafer(MullerSchaferSEXP);
    Rcpp::traits::input_parameter< const int >::type kNew(kNewSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type informationRatesNew(informationRatesNewSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type efficacyStoppingNew(efficacyStoppingNewSEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type futilityStoppingNew(futilityStoppingNewSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeAlphaSpendingNew(typeAlphaSpendingNewSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterAlphaSpendingNew(parameterAlphaSpendingNewSEXP);
    Rcpp::traits::input_parameter< const std::string >::type typeBetaSpendingNew(typeBetaSpendingNewSEXP);
    Rcpp::traits::input_parameter< const double >::type parameterBetaSpendingNew(parameterBetaSpendingNewSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type userBetaSpendingNew(userBetaSpendingNewSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type spendingTimeNew(spendingTimeNewSEXP);
    Rcpp::traits::input_parameter< const double >::type varianceRatio(varianceRatioSEXP);
    rcpp_result_gen = Rcpp::wrap(adaptDesign(betaNew, INew, L, zL, theta, IMax, kMax, informationRates, efficacyStopping, futilityStopping, criticalValues, alpha, typeAlphaSpending, parameterAlphaSpending, userAlphaSpending, futilityBounds, typeBetaSpending, parameterBetaSpending, spendingTime, MullerSchafer, kNew, informationRatesNew, efficacyStoppingNew, futilityStoppingNew, typeAlphaSpendingNew, parameterAlphaSpendingNew, typeBetaSpendingNew, parameterBetaSpendingNew, userBetaSpendingNew, spendingTimeNew, varianceRatio));
    return rcpp_result_gen;
END_RCPP
}
// hasVariable
bool hasVariable(DataFrame df, std::string varName);
RcppExport SEXP _lrstat_hasVariable(SEXP dfSEXP, SEXP varNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df(dfSEXP);
    Rcpp::traits::input_parameter< std::string >::type varName(varNameSEXP);
    rcpp_result_gen = Rcpp::wrap(hasVariable(df, varName));
    return rcpp_result_gen;
END_RCPP
}
// invsympd
NumericMatrix invsympd(const NumericMatrix& a);
RcppExport SEXP _lrstat_invsympd(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(invsympd(a));
    return rcpp_result_gen;
END_RCPP
}
// quantilecpp
double quantilecpp(const NumericVector& x, const double p);
RcppExport SEXP _lrstat_quantilecpp(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(quantilecpp(x, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_lrstat_simonBayesAnalysis", (DL_FUNC) &_lrstat_simonBayesAnalysis, 7},
    {"_lrstat_simonBayesSim", (DL_FUNC) &_lrstat_simonBayesSim, 14},
    {"_lrstat_binary_tte_sim", (DL_FUNC) &_lrstat_binary_tte_sim, 27},
    {"_lrstat_kmstat1", (DL_FUNC) &_lrstat_kmstat1, 14},
    {"_lrstat_kmstat", (DL_FUNC) &_lrstat_kmstat, 14},
    {"_lrstat_kmpower", (DL_FUNC) &_lrstat_kmpower, 28},
    {"_lrstat_kmsamplesize", (DL_FUNC) &_lrstat_kmsamplesize, 31},
    {"_lrstat_kmpower1s", (DL_FUNC) &_lrstat_kmpower1s, 25},
    {"_lrstat_kmsamplesize1s", (DL_FUNC) &_lrstat_kmsamplesize1s, 28},
    {"_lrstat_kmpowerequiv", (DL_FUNC) &_lrstat_kmpowerequiv, 24},
    {"_lrstat_kmsamplesizeequiv", (DL_FUNC) &_lrstat_kmsamplesizeequiv, 26},
    {"_lrstat_kmdiff", (DL_FUNC) &_lrstat_kmdiff, 9},
    {"_lrstat_lrsim", (DL_FUNC) &_lrstat_lrsim, 25},
    {"_lrstat_lrsim3a", (DL_FUNC) &_lrstat_lrsim3a, 27},
    {"_lrstat_lrsim2e", (DL_FUNC) &_lrstat_lrsim2e, 29},
    {"_lrstat_lrsim2e3a", (DL_FUNC) &_lrstat_lrsim2e3a, 38},
    {"_lrstat_lrstat1", (DL_FUNC) &_lrstat_lrstat1, 18},
    {"_lrstat_lrstat", (DL_FUNC) &_lrstat_lrstat, 18},
    {"_lrstat_caltime", (DL_FUNC) &_lrstat_caltime, 13},
    {"_lrstat_getDurationFromNevents", (DL_FUNC) &_lrstat_getDurationFromNevents, 14},
    {"_lrstat_lrpower", (DL_FUNC) &_lrstat_lrpower, 32},
    {"_lrstat_getNeventsFromHazardRatio", (DL_FUNC) &_lrstat_getNeventsFromHazardRatio, 19},
    {"_lrstat_lrsamplesize", (DL_FUNC) &_lrstat_lrsamplesize, 35},
    {"_lrstat_lrpowerequiv", (DL_FUNC) &_lrstat_lrpowerequiv, 24},
    {"_lrstat_lrsamplesizeequiv", (DL_FUNC) &_lrstat_lrsamplesizeequiv, 26},
    {"_lrstat_updateGraph", (DL_FUNC) &_lrstat_updateGraph, 4},
    {"_lrstat_fadjpboncpp", (DL_FUNC) &_lrstat_fadjpboncpp, 3},
    {"_lrstat_fwgtmat", (DL_FUNC) &_lrstat_fwgtmat, 2},
    {"_lrstat_fadjpsimcpp", (DL_FUNC) &_lrstat_fadjpsimcpp, 3},
    {"_lrstat_repeatedPValuecpp", (DL_FUNC) &_lrstat_repeatedPValuecpp, 7},
    {"_lrstat_fseqboncpp", (DL_FUNC) &_lrstat_fseqboncpp, 11},
    {"_lrstat_fstp2seqcpp", (DL_FUNC) &_lrstat_fstp2seqcpp, 4},
    {"_lrstat_fstdmixcpp", (DL_FUNC) &_lrstat_fstdmixcpp, 7},
    {"_lrstat_fmodmixcpp", (DL_FUNC) &_lrstat_fmodmixcpp, 7},
    {"_lrstat_getCI", (DL_FUNC) &_lrstat_getCI, 10},
    {"_lrstat_getRCI", (DL_FUNC) &_lrstat_getRCI, 10},
    {"_lrstat_getADCI", (DL_FUNC) &_lrstat_getADCI, 20},
    {"_lrstat_getADRCI", (DL_FUNC) &_lrstat_getADRCI, 20},
    {"_lrstat_getCP", (DL_FUNC) &_lrstat_getCP, 29},
    {"_lrstat_ftrunccpp", (DL_FUNC) &_lrstat_ftrunccpp, 3},
    {"_lrstat_simon2stage", (DL_FUNC) &_lrstat_simon2stage, 5},
    {"_lrstat_powerOnePropExact", (DL_FUNC) &_lrstat_powerOnePropExact, 4},
    {"_lrstat_samplesizeOnePropExact", (DL_FUNC) &_lrstat_samplesizeOnePropExact, 4},
    {"_lrstat_powerOneRateExact", (DL_FUNC) &_lrstat_powerOneRateExact, 5},
    {"_lrstat_samplesizeOneRateExact", (DL_FUNC) &_lrstat_samplesizeOneRateExact, 5},
    {"_lrstat_powerFisherExact", (DL_FUNC) &_lrstat_powerFisherExact, 5},
    {"_lrstat_samplesizeFisherExact", (DL_FUNC) &_lrstat_samplesizeFisherExact, 5},
    {"_lrstat_remlRiskDiff", (DL_FUNC) &_lrstat_remlRiskDiff, 5},
    {"_lrstat_remlRiskDiff2", (DL_FUNC) &_lrstat_remlRiskDiff2, 5},
    {"_lrstat_zstatRiskDiff", (DL_FUNC) &_lrstat_zstatRiskDiff, 5},
    {"_lrstat_mnRiskDiffCI", (DL_FUNC) &_lrstat_mnRiskDiffCI, 5},
    {"_lrstat_remlRiskRatio", (DL_FUNC) &_lrstat_remlRiskRatio, 5},
    {"_lrstat_remlRiskRatio2", (DL_FUNC) &_lrstat_remlRiskRatio2, 5},
    {"_lrstat_zstatRiskRatio", (DL_FUNC) &_lrstat_zstatRiskRatio, 5},
    {"_lrstat_mnRiskRatioCI", (DL_FUNC) &_lrstat_mnRiskRatioCI, 5},
    {"_lrstat_remlOddsRatio", (DL_FUNC) &_lrstat_remlOddsRatio, 5},
    {"_lrstat_remlOddsRatio2", (DL_FUNC) &_lrstat_remlOddsRatio2, 5},
    {"_lrstat_zstatOddsRatio", (DL_FUNC) &_lrstat_zstatOddsRatio, 5},
    {"_lrstat_mnOddsRatioCI", (DL_FUNC) &_lrstat_mnOddsRatioCI, 5},
    {"_lrstat_remlRateDiff", (DL_FUNC) &_lrstat_remlRateDiff, 5},
    {"_lrstat_remlRateDiff2", (DL_FUNC) &_lrstat_remlRateDiff2, 5},
    {"_lrstat_zstatRateDiff", (DL_FUNC) &_lrstat_zstatRateDiff, 5},
    {"_lrstat_mnRateDiffCI", (DL_FUNC) &_lrstat_mnRateDiffCI, 5},
    {"_lrstat_remlRateRatio", (DL_FUNC) &_lrstat_remlRateRatio, 5},
    {"_lrstat_remlRateRatio2", (DL_FUNC) &_lrstat_remlRateRatio2, 5},
    {"_lrstat_zstatRateRatio", (DL_FUNC) &_lrstat_zstatRateRatio, 5},
    {"_lrstat_mnRateRatioCI", (DL_FUNC) &_lrstat_mnRateRatioCI, 5},
    {"_lrstat_powerRiskDiffExact", (DL_FUNC) &_lrstat_powerRiskDiffExact, 7},
    {"_lrstat_samplesizeRiskDiffExact", (DL_FUNC) &_lrstat_samplesizeRiskDiffExact, 6},
    {"_lrstat_powerRiskRatioExact", (DL_FUNC) &_lrstat_powerRiskRatioExact, 7},
    {"_lrstat_samplesizeRiskRatioExact", (DL_FUNC) &_lrstat_samplesizeRiskRatioExact, 6},
    {"_lrstat_powerRiskDiffExactEquiv", (DL_FUNC) &_lrstat_powerRiskDiffExactEquiv, 8},
    {"_lrstat_samplesizeRiskDiffExactEquiv", (DL_FUNC) &_lrstat_samplesizeRiskDiffExactEquiv, 7},
    {"_lrstat_powerRiskRatioExactEquiv", (DL_FUNC) &_lrstat_powerRiskRatioExactEquiv, 8},
    {"_lrstat_samplesizeRiskRatioExactEquiv", (DL_FUNC) &_lrstat_samplesizeRiskRatioExactEquiv, 7},
    {"_lrstat_riskDiffExactPValue", (DL_FUNC) &_lrstat_riskDiffExactPValue, 6},
    {"_lrstat_riskDiffExactCI", (DL_FUNC) &_lrstat_riskDiffExactCI, 5},
    {"_lrstat_riskRatioExactPValue", (DL_FUNC) &_lrstat_riskRatioExactPValue, 6},
    {"_lrstat_riskRatioExactCI", (DL_FUNC) &_lrstat_riskRatioExactCI, 5},
    {"_lrstat_nbstat1", (DL_FUNC) &_lrstat_nbstat1, 17},
    {"_lrstat_nbstat", (DL_FUNC) &_lrstat_nbstat, 17},
    {"_lrstat_nbpower", (DL_FUNC) &_lrstat_nbpower, 30},
    {"_lrstat_nbsamplesize", (DL_FUNC) &_lrstat_nbsamplesize, 33},
    {"_lrstat_nbpower1s", (DL_FUNC) &_lrstat_nbpower1s, 25},
    {"_lrstat_nbsamplesize1s", (DL_FUNC) &_lrstat_nbsamplesize1s, 28},
    {"_lrstat_nbpowerequiv", (DL_FUNC) &_lrstat_nbpowerequiv, 26},
    {"_lrstat_nbsamplesizeequiv", (DL_FUNC) &_lrstat_nbsamplesizeequiv, 28},
    {"_lrstat_rmst", (DL_FUNC) &_lrstat_rmst, 4},
    {"_lrstat_covrmst", (DL_FUNC) &_lrstat_covrmst, 13},
    {"_lrstat_rmstat1", (DL_FUNC) &_lrstat_rmstat1, 14},
    {"_lrstat_rmstat", (DL_FUNC) &_lrstat_rmstat, 14},
    {"_lrstat_rmpower", (DL_FUNC) &_lrstat_rmpower, 28},
    {"_lrstat_rmsamplesize", (DL_FUNC) &_lrstat_rmsamplesize, 31},
    {"_lrstat_rmpower1s", (DL_FUNC) &_lrstat_rmpower1s, 25},
    {"_lrstat_rmsamplesize1s", (DL_FUNC) &_lrstat_rmsamplesize1s, 28},
    {"_lrstat_rmpowerequiv", (DL_FUNC) &_lrstat_rmpowerequiv, 24},
    {"_lrstat_rmsamplesizeequiv", (DL_FUNC) &_lrstat_rmsamplesizeequiv, 26},
    {"_lrstat_rmest", (DL_FUNC) &_lrstat_rmest, 8},
    {"_lrstat_rmdiff", (DL_FUNC) &_lrstat_rmdiff, 10},
    {"_lrstat_rpsft", (DL_FUNC) &_lrstat_rpsft, 18},
    {"_lrstat_kmest", (DL_FUNC) &_lrstat_kmest, 7},
    {"_lrstat_lrtest", (DL_FUNC) &_lrstat_lrtest, 8},
    {"_lrstat_liferegr", (DL_FUNC) &_lrstat_liferegr, 11},
    {"_lrstat_phregr", (DL_FUNC) &_lrstat_phregr, 11},
    {"_lrstat_set_seed", (DL_FUNC) &_lrstat_set_seed, 1},
    {"_lrstat_stl_sort", (DL_FUNC) &_lrstat_stl_sort, 1},
    {"_lrstat_findInterval3", (DL_FUNC) &_lrstat_findInterval3, 2},
    {"_lrstat_errorSpentcpp", (DL_FUNC) &_lrstat_errorSpentcpp, 4},
    {"_lrstat_exitprobcpp", (DL_FUNC) &_lrstat_exitprobcpp, 4},
    {"_lrstat_ptpwexpcpp", (DL_FUNC) &_lrstat_ptpwexpcpp, 6},
    {"_lrstat_qtpwexpcpp1", (DL_FUNC) &_lrstat_qtpwexpcpp1, 6},
    {"_lrstat_qtpwexpcpp", (DL_FUNC) &_lrstat_qtpwexpcpp, 6},
    {"_lrstat_rtpwexpcpp", (DL_FUNC) &_lrstat_rtpwexpcpp, 4},
    {"_lrstat_getBoundcpp", (DL_FUNC) &_lrstat_getBoundcpp, 8},
    {"_lrstat_getPower", (DL_FUNC) &_lrstat_getPower, 10},
    {"_lrstat_accrual", (DL_FUNC) &_lrstat_accrual, 4},
    {"_lrstat_getAccrualDurationFromN", (DL_FUNC) &_lrstat_getAccrualDurationFromN, 3},
    {"_lrstat_patrisk", (DL_FUNC) &_lrstat_patrisk, 4},
    {"_lrstat_pevent", (DL_FUNC) &_lrstat_pevent, 4},
    {"_lrstat_hd", (DL_FUNC) &_lrstat_hd, 6},
    {"_lrstat_pd", (DL_FUNC) &_lrstat_pd, 5},
    {"_lrstat_ad", (DL_FUNC) &_lrstat_ad, 8},
    {"_lrstat_natrisk", (DL_FUNC) &_lrstat_natrisk, 12},
    {"_lrstat_nevent", (DL_FUNC) &_lrstat_nevent, 12},
    {"_lrstat_nevent2", (DL_FUNC) &_lrstat_nevent2, 12},
    {"_lrstat_getDesign", (DL_FUNC) &_lrstat_getDesign, 18},
    {"_lrstat_getDesignEquiv", (DL_FUNC) &_lrstat_getDesignEquiv, 17},
    {"_lrstat_adaptDesign", (DL_FUNC) &_lrstat_adaptDesign, 31},
    {"_lrstat_hasVariable", (DL_FUNC) &_lrstat_hasVariable, 2},
    {"_lrstat_invsympd", (DL_FUNC) &_lrstat_invsympd, 1},
    {"_lrstat_quantilecpp", (DL_FUNC) &_lrstat_quantilecpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_lrstat(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
